// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.cloud.sqlcommenter.grpc.backend.service;

import com.google.cloud.sqlcommenter.grpc.backend.dao.StudentDao;
import com.google.cloud.sqlcommenter.grpc.backend.domain.Student;
import com.google.cloud.sqlcommenter.grpc.stubs.StudentRequest;
import com.google.cloud.sqlcommenter.grpc.stubs.StudentResponse;
import com.google.cloud.sqlcommenter.grpc.stubs.StudentServiceGrpc;
import io.grpc.Status;
import io.grpc.stub.StreamObserver;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class StudentServiceImpl extends StudentServiceGrpc.StudentServiceImplBase {
  // Let's use a logger to log everything that we want
  private static final Logger logger = Logger.getLogger(StudentServiceImpl.class.getName());
  // We need to have an instance of the dao class to work with the database
  private final StudentDao studentDao = new StudentDao();

  // We have to override the getStudentInfo that was defined in the StudentService class
  // The StudentService class is an autogenerated class by the proto file
  // So, let's override the getStudentInfo method here.
  @Override
  public void getStudentInfo(
      StudentRequest request, StreamObserver<StudentResponse> responseObserver) {
    String studentId =
        request.getStudentId(); // the student ID should be passed with the request message

    try {
      Student student =
          studentDao.findById(
              studentId); // Let's find the student information from the student table

      /*
         The getResults method will help us to fetch the results for the student from the result service.
         this method will call the result service through its client and bring back the result as a list of strings
      */

      // Once all the results are clear, we can build our response message
      StudentResponse studentResponse =
          StudentResponse.newBuilder()
              .setStudentId(studentId)
              .setName(student.getName())
              .setAge(student.getAge())
              .build();

      /*
          gRPC works in an asynchronous manner, so if you have ever worked with asynchronous programming
          you would know what will happen with following two methods.
          with the onNext method we send the response, once the response is sent we use onCompleted()
      */
      responseObserver.onNext(studentResponse);
      responseObserver.onCompleted();
    } catch (NoSuchElementException e) {
      logger.log(Level.SEVERE, "NO STUDENT FOUND WITH THE STUDENT ID :- " + studentId);

      // If some error occurs we sent an error with the following status which is not_found
      responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
    }
  }
}
