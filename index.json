[
{
	"uri": "https://google.github.io/sqlcommenter/php/laravel/",
	"title": "Laravel",
	"tags": ["php", "laravel"],
	"description": "",
	"content": " Introduction Requirements Installation  composer install source   Fields  Sample log entry Expected fields   References  Introduction This package is in the form of Illuminate Database Connector Wrapper whose purpose is to augment a SQL statement right before execution, with information about the controller and user code to help with later making database optimization decisions, after examining the statements.\nRequirements It requires php 8 \u0026amp; above.\nInstallation At present, we can install sqlcommenter-laravel from source.\nThis middleware can be installed by one of the following methods:\nComposer composer require google/sqlcommenter-laravel Source git clone https://github.com/google/sqlcommenter.git # Add the following to composer.json  \u0026#34;repositories\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;path\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;/full/or/relative/path/to/sqlcommenter/php/sqlcommenter-php/packages/sqlcommenter-laravel/\u0026#34; } ] composer require \u0026#34;google/sqlcommenter-laravel\u0026#34; Enabling it Publish the config file from library to into laravel app using below command\nphp artisan vendor:publish --provider=\u0026#34;Google\\GoogleSqlCommenterLaravel\\GoogleSqlCommenterServiceProvider\u0026#34; Add the following class above Illuminate\\Database\\DatabaseServiceProvider::class, in config/app.php\n\u0026#39;providers\u0026#39; =\u0026gt; [ ... Google\\GoogleSqlCommenterLaravel\\Database\\DatabaseServiceProvider::class, Illuminate\\Database\\DatabaseServiceProvider::class, ... ] Fields SQL Statements generated are appended with a comment having fields:\n comma separated key-value pairs e.g. controller='index'. values are SQL escaped i.e. key='value'. URL-quoted except for the equals(=) sign e.g route='%5Epolls/%24'. So, should be URL-unquoted when being consumed.  Sample log entry After making requests to the sample middleware-enabled polls web-app, we can see logs like:\n2022-04-29 13:59:39.922 IST [27935] LOG: duration: 0.012 ms execute pdo_stmt_00000003: Select * from users /*framework=\u0026#39;laravel-9.7.0\u0026#39;,controller=\u0026#39;UserController\u0026#39;,action=\u0026#39;index\u0026#39;,route=\u0026#39;%%2Fapi%%2Ftest\u0026#39;,db_driver=\u0026#39;pgsql\u0026#39;,traceparent=\u0026#39;00-1cd60708968a61e942b5dacc2d4a5473-7534abe7ed36ce35-01\u0026#39;*/ Expected Fields    Field Included by default? Description     action ✔ The application namespace of the matching URL pattern in your routes/api.php   controller ✔ The name of the matching URL pattern as described in your routes/api.php   db_driver ✔ The name of the php database engine   framework ✔ The word \u0026ldquo;laravel\u0026rdquo; and the version of laravel being used   route ✔ The route of the matching URL pattern as described in your routes/api.php   traceparent ✔ The W3C TraceContext.Traceparent field of the OpenTelemetry trace    End to end examples Examples are based upon the sample app.\nSource code # config/google_sqlcommenter.php \u0026lt;?php return [ /* | | These parameters enables/disable whether the specified info can be | appended to the query */ \u0026#39;include\u0026#39; =\u0026gt; [ \u0026#39;framework\u0026#39; =\u0026gt; true, \u0026#39;controller\u0026#39; =\u0026gt; true, \u0026#39;route\u0026#39; =\u0026gt; true, \u0026#39;db_driver\u0026#39; =\u0026gt; true, \u0026#39;opentelemetry\u0026#39; =\u0026gt; true, \u0026#39;action\u0026#39; =\u0026gt; true, ] ]; From the command line, we run the laravel development server in one terminal:\nphp artisan serve And we use curl to make an HTTP request in another:\ncurl http://127.0.0.1:8000/user/select Results Examining our Postgresql server logs, with the various options\n2022-04-29 13:59:39.922 IST [27935] LOG: duration: 0.012 ms execute pdo_stmt_00000003: Select 1/*framework=\u0026#39;laravel-9.7.0\u0026#39;,controller=\u0026#39;UserController\u0026#39;,action=\u0026#39;index\u0026#39;,route=\u0026#39;%%2Fapi%%2Ftest\u0026#39;,db_driver=\u0026#39;pgsql\u0026#39;, traceparent=\u0026#39;00-1cd60708968a61e942b5dacc2d4a5473-7534abe7ed36ce35-01\u0026#39;*/ References    Resource URL     laravel https://laravel.com/docs/5.1/quickstart   OpenTelemetry https://opentelemetry.io   opentelemetry-php https://github.com/open-telemetry/opentelemetry-php   sqlcommenter on Github https://github.com/google/sqlcommenter    "
},
{
	"uri": "https://google.github.io/sqlcommenter/ruby/rails/",
	"title": "Ruby on Rails",
	"tags": ["ruby", "rubyonrails", "rails", "activerecord", "marginalia"],
	"description": "",
	"content": " Introduction Installation Usage Fields End-to-end example  Results   References  Introduction sqlcommenter_rails adds comments to your SQL statements.\nIt is powered by marginalia and also adds OpenCensus information to the comments if you use the opencensus gem.\nsqlcommenter_rails configures marginalia and marginalia-opencensus to match the SQLCommenter format.\nInstallation Add this line to your application\u0026rsquo;s Gemfile\ngem \u0026#39;sqlcommenter_rails\u0026#39; Then run bundle and restart your Rails server.\nTo enable OpenCensus support, add the opencensus gem to your Gemfile, and add the following line in the beginning of config/application.rb:\nrequire \u0026#39;opencensus/trace/integrations/rails\u0026#39; Usage All of the SQL queries initiated by the application will now come with comments!\nFields The following fields will be added to your SQL statements as comments:\n   Field Included by default? Description Provided by     action ✔ Controller action name marginalia   application ✔ Application name marginalia   controller ✔ Controller name marginalia   controller_with_namespace ❌ Full classname (including namespace) of the controller marginalia   database ❌ Database name marginalia   db_driver ✔ Database adapter class name sqlcommenter_rails   db_host ❌ Database hostname marginalia   framework ✔ rails_v followed by Rails::VERSION sqlcommenter_rails   hostname ❌ Socket.gethostname marginalia   job ❌ Classname of the ActiveJob being performed marginalia   line ❌ File and line number calling query marginalia   pid ❌ Current process id marginalia   route ✔ Request\u0026rsquo;s full path sqlcommenter_rails   socket ❌ Database socket marginalia   traceparent ❌ The W3C TraceContext.Traceparent field of the OpenCensus trace marginalia-opencensus    To include the traceparent field, install the marginalia-opencensus gem and it will be automatically included by default.\nTo change which fields are included, set Marginalia::Comment.components = [ :field1, :field2, ... ] in config/initializers/marginalia.rb as described in the marginalia documentation.\nEnd to end example A Rails 6 sqlcommenter_rails demo is available at: https://github.com/google/sqlcommenter/tree/master/ruby/sqlcommenter-ruby/sqlcommenter_rails_demo\nThe demo is a vanilla Rails API application with sqlcommenter_rails and OpenCensus enabled.\nFirst, we create a vanilla Rails application with the following command:\ngem install rails -v 6.0.0.rc1 rails _6.0.0.rc1_ new sqlcommenter_rails_demo --api Then, we add and implement a basic Post model and controller:\nbin/rails g model Post title:text bin/rails g controller Posts index create Implement the controller:\n# app/controllers/posts_controller.rb class PostsController \u0026lt; ApplicationController def index render json: Post.all end def create title = params[:title].to_s.strip head :bad_request if title.empty? render json: Post.create!(title: title) end end Configure the routes:\n# config/routes.rb Rails.application.routes.draw do resources :posts, only: %i[index create] end Then, we add sqlcommenter_rails and OpenCensus:\n# Gemfile gem \u0026#39;opencensus\u0026#39; gem \u0026#39;sqlcommenter_rails\u0026#39; # config/application.rb require \u0026#34;opencensus/trace/integrations/rails\u0026#34; Finally, we run bundle to install the newly added gems:\nbundle Now, we can start the server:\nbin/rails s In a separate terminal, you can monitor the relevant SQL statements in the server log with the following command:\ntail -f log/development.log | grep \u0026#39;Post \u0026#39; Results The demo application has 2 endpoints: GET /posts and POST /posts.\nGET /posts curl localhost:3000/posts Post Load (0.1ms) SELECT \u0026quot;posts\u0026quot;.* FROM \u0026quot;posts\u0026quot; /* action='index',application='SqlcommenterRailsDemo',controller='posts', db_driver='ActiveRecord::ConnectionAdapters::SQLite3Adapter', framework='rails_v6.0.0.rc1',route='/posts', traceparent='00-ff19308b1f17fedc5864e929bed1f44e-6ddace73a9debf63-01'*/ POST /posts curl -X POST localhost:3000/posts -d \u0026#39;title=my-post\u0026#39; Post Create (0.2ms) INSERT INTO \u0026quot;posts\u0026quot; (\u0026quot;title\u0026quot;, \u0026quot;created_at\u0026quot;, \u0026quot;updated_at\u0026quot;) VALUES (?, ?, ?) /*action='create',application='SqlcommenterRailsDemo', controller='posts',db_driver='ActiveRecord::ConnectionAdapters::SQLite3Adapter', framework='rails_v6.0.0.rc1',route='/posts', traceparent='00-ff19308b1f17fedc5864e929bed1f44e-6ddace73a9debf63-01'*/ References    Resource URL     sqlcommenter_rails https://github.com/google/sqlcommenter/tree/master/ruby/sqlcommenter-ruby/sqlcommenter_rails   marginalia https://github.com/basecamp/marginalia   OpenCensus https://opencensus.io/   The opencensus gem https://github.com/census-instrumentation/opencensus-ruby   marginalia-opencensus https://github.com/google/sqlcommenter/tree/master/ruby/sqlcommenter-ruby/marginalia-opencensus    "
},
{
	"uri": "https://google.github.io/sqlcommenter/java/hibernate/",
	"title": "Hibernate",
	"tags": [],
	"description": "",
	"content": " Introduction Requirements Using the integration  Imports Maven imports   End to end example  Directory structure Source code Question.java ListQuestions.java hibernate.cfg.xml Question.hbm.xml   References  Introduction We provide an integration for Hibernate ORM that will inspect and augment your SQL with information about your setup. It is best used when coupled with other frameworks such as:\n  Requirements  Java 8+ Successfully installed sqlcommenter-java  Using the integration You can include this integration in your Java programs in 2 ways.\nPersistance XML file By simply adding to your persistence XML file the property \u0026quot;hibernate.session_factory.statement_inspector\u0026quot;\ne.g. to your hibernate.cfg.xml file\n\u0026lt;property name=\u0026#34;hibernate.session_factory.statement_inspector\u0026#34; value=\u0026#34;com.google.cloud.sqlcommenter.schibernate.SCHibernate\u0026#34; /\u0026gt; In Java source code When creating your Hibernate session factory, add our StatementInspector like this:\nimport com.google.cloud.sqlcommenter.schhibernate.SCHibernate; ... sessionFactoryBuilder.applyStatementInspector(new SCHibernate()); Spring and JPA end-to-end example First thing you need to do is to download the sqlcommenter-java-guides-spring-jpa Java project.\nSource code This project uses the following JPA entities:\nPost_java  Tag_java   // In file Post.java package com.google.cloud.sqlcommenter.spring.jpa.domain; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity @Table(name = \u0026#34;post\u0026#34;) public class Post { @Id @GeneratedValue private Long id; private String title; @ManyToMany @JoinTable( name = \u0026#34;post_tag\u0026#34;, joinColumns = @JoinColumn(name = \u0026#34;post_id\u0026#34;), inverseJoinColumns = @JoinColumn(name = \u0026#34;tag_id\u0026#34;)) private List\u0026lt;Tag\u0026gt; tags = new ArrayList\u0026lt;\u0026gt;(); public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public List\u0026lt;Tag\u0026gt; getTags() { return tags; } } // In file Tag.java package com.google.cloud.sqlcommenter.spring.jpa.domain; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.Id; import javax.persistence.Table; @Entity @Table(name = \u0026#34;tag\u0026#34;) public class Tag { @Id @GeneratedValue private Long id; private String name; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }   The Repository layer looks as follows:\nPostRepository_java  TagRepository_java   // In file PostRepository.java  package com.google.cloud.sqlcommenter.spring.jpa.dao; import com.google.cloud.sqlcommenter.spring.jpa.domain.Post; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository; import java.util.List; @Repository public interface PostRepository extends CrudRepository\u0026lt;Post, Long\u0026gt; { List\u0026lt;Post\u0026gt; findByTitle(String title); } // In file TagRepository.java  package com.google.cloud.sqlcommenter.spring.jpa.dao; import com.google.cloud.sqlcommenter.spring.jpa.domain.Tag; import org.springframework.data.repository.CrudRepository; import org.springframework.stereotype.Repository; import java.util.List; @Repository public interface TagRepository extends CrudRepository\u0026lt;Tag, Long\u0026gt; { List\u0026lt;Tag\u0026gt; findByNameIn(List\u0026lt;String\u0026gt; names); }   The Service layer looks as follows:\nForumService_java  ForumServiceImpl_java   // In file ForumService.java  package com.google.cloud.sqlcommenter.spring.jpa.service; import com.google.cloud.sqlcommenter.spring.jpa.domain.Post; import java.util.List; public interface ForumService { Post createPost(String title, String... tags); List\u0026lt;Post\u0026gt; findPostsByTitle(String title); Post findPostById(Long id); } // In file ForumServiceImpl.java  package com.google.cloud.sqlcommenter.spring.jpa.service; import com.google.cloud.sqlcommenter.spring.jpa.dao.PostRepository; import com.google.cloud.sqlcommenter.spring.jpa.dao.TagRepository; import com.google.cloud.sqlcommenter.spring.jpa.domain.Post; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.Arrays; import java.util.List; @Service public class ForumServiceImpl implements ForumService { @Autowired private PostRepository postRepository; @Autowired private TagRepository tagRepository; @Override @Transactional public Post createPost(String title, String... tags) { Post post = new Post(); post.setTitle(title); post.getTags().addAll(tagRepository.findByNameIn(Arrays.asList(tags))); return postRepository.save(post); } @Override @Transactional(readOnly = true) public List\u0026lt;Post\u0026gt; findPostsByTitle(String title) { return postRepository.findByTitle(title); } @Override @Transactional public Post findPostById(Long id) { return postRepository.findById(id).orElse(null); } }   The Spring JPA configuration looks as follows:\n// In file JpaTransactionManagerConfiguration.java  package com.google.cloud.sqlcommenter.spring.jpa; import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import com.google.cloud.sqlcommenter.spring.util.SCHibernateWrapper; import org.hibernate.jpa.HibernatePersistenceProvider; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.*; import org.springframework.context.support.PropertySourcesPlaceholderConfigurer; import org.springframework.data.jpa.repository.config.EnableJpaRepositories; import org.springframework.orm.jpa.JpaTransactionManager; import org.springframework.orm.jpa.JpaVendorAdapter; import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean; import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter; import org.springframework.transaction.annotation.EnableTransactionManagement; import org.springframework.transaction.support.TransactionTemplate; import javax.persistence.EntityManagerFactory; import javax.sql.DataSource; import java.util.Properties; @Configuration @PropertySource({\u0026#34;/META-INF/jdbc-hsqldb.properties\u0026#34;}) @ComponentScan(basePackages = \u0026#34;com.google.cloud.sqlcommenter.spring.jpa\u0026#34;) @EnableTransactionManagement @EnableAspectJAutoProxy @EnableJpaRepositories public class JpaTransactionManagerConfiguration { @Value(\u0026#34;${jdbc.dataSourceClassName}\u0026#34;) private String dataSourceClassName; @Value(\u0026#34;${jdbc.url}\u0026#34;) private String jdbcUrl; @Value(\u0026#34;${jdbc.username}\u0026#34;) private String jdbcUser; @Value(\u0026#34;${jdbc.password}\u0026#34;) private String jdbcPassword; @Value(\u0026#34;${hibernate.dialect}\u0026#34;) private String hibernateDialect; @Bean(destroyMethod = \u0026#34;close\u0026#34;) public DataSource actualDataSource() { Properties driverProperties = new Properties(); driverProperties.setProperty(\u0026#34;url\u0026#34;, jdbcUrl); driverProperties.setProperty(\u0026#34;user\u0026#34;, jdbcUser); driverProperties.setProperty(\u0026#34;password\u0026#34;, jdbcPassword); Properties properties = new Properties(); properties.put(\u0026#34;dataSourceClassName\u0026#34;, dataSourceClassName); properties.put(\u0026#34;dataSourceProperties\u0026#34;, driverProperties); properties.setProperty(\u0026#34;maximumPoolSize\u0026#34;, String.valueOf(3)); return new HikariDataSource(new HikariConfig(properties)); } @Bean public static PropertySourcesPlaceholderConfigurer properties() { return new PropertySourcesPlaceholderConfigurer(); } @Bean public DataSource dataSource() { return actualDataSource(); } @Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory() { LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean(); localContainerEntityManagerFactoryBean.setPersistenceUnitName(getClass().getSimpleName()); localContainerEntityManagerFactoryBean.setPersistenceProvider(new HibernatePersistenceProvider()); localContainerEntityManagerFactoryBean.setDataSource(dataSource()); localContainerEntityManagerFactoryBean.setPackagesToScan(packagesToScan()); JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter(); localContainerEntityManagerFactoryBean.setJpaVendorAdapter(vendorAdapter); localContainerEntityManagerFactoryBean.setJpaProperties(additionalProperties()); return localContainerEntityManagerFactoryBean; } @Bean public JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory){ JpaTransactionManager transactionManager = new JpaTransactionManager(); transactionManager.setEntityManagerFactory(entityManagerFactory); return transactionManager; } @Bean public TransactionTemplate transactionTemplate(EntityManagerFactory entityManagerFactory) { return new TransactionTemplate(transactionManager(entityManagerFactory)); } protected Properties additionalProperties() { Properties properties = new Properties(); properties.setProperty(\u0026#34;hibernate.dialect\u0026#34;, hibernateDialect); properties.setProperty(\u0026#34;hibernate.hbm2ddl.auto\u0026#34;, \u0026#34;create-drop\u0026#34;); properties.put( \u0026#34;hibernate.session_factory.statement_inspector\u0026#34;, SCHibernateWrapper.class.getName() ); return properties; } protected String[] packagesToScan() { return new String[]{ \u0026#34;com.google.cloud.sqlcommenter.spring.jpa.domain\u0026#34; }; } } Now, the test looks as follows:\n// In file JpaTransactionManagerTest.java  package com.google.cloud.sqlcommenter.spring.jpa; import com.google.cloud.sqlcommenter.spring.jpa.dao.TagRepository; import com.google.cloud.sqlcommenter.spring.jpa.domain.Post; import com.google.cloud.sqlcommenter.spring.jpa.domain.Tag; import com.google.cloud.sqlcommenter.spring.jpa.service.ForumService; import com.google.cloud.sqlcommenter.spring.util.SCHibernateWrapper; import com.google.cloud.sqlcommenter.threadlocalstorage.State; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.annotation.DirtiesContext; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import java.util.List; import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = JpaTransactionManagerConfiguration.class) @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD) public class JpaTransactionManagerTest { @Autowired private TagRepository tagRepository; @Autowired private ForumService forumService; @Before public void init() { Tag hibernate = new Tag(); hibernate.setName(\u0026#34;hibernate\u0026#34;); tagRepository.save(hibernate); Tag jpa = new Tag(); jpa.setName(\u0026#34;jpa\u0026#34;); tagRepository.save(jpa); } @Test public void test() { State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;CreatePost\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); SCHibernateWrapper.reset(); Post newPost = forumService.createPost(\u0026#34;High-Performance Java Persistence\u0026#34;, \u0026#34;hibernate\u0026#34;, \u0026#34;jpa\u0026#34;); assertNotNull(newPost.getId()); List\u0026lt;String\u0026gt; sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(5, sqlStatements.size()); assertEquals( 5, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); SCHibernateWrapper.reset(); State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;FindPostsByTitle\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); List\u0026lt;Post\u0026gt; posts = forumService.findPostsByTitle(\u0026#34;High-Performance Java Persistence\u0026#34;); assertEquals(1, posts.size()); sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(1, sqlStatements.size()); assertEquals( 1, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;FindPostsByTitle\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;FindPostById\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); SCHibernateWrapper.reset(); Post post = forumService.findPostById(newPost.getId()); assertEquals(\u0026#34;High-Performance Java Persistence\u0026#34;, post.getTitle()); sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(1, sqlStatements.size()); assertEquals( 1, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;FindPostById\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); } } When running the unit test above, we can see that the SQL statements include the comments as well:\nselect tag0_.id as id1_2_, tag0_.name as name2_2_ from tag tag0_ where tag0_.name in (? , ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ call next value for hibernate_sequence /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post (title, id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post_tag (post_id, tag_id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post_tag (post_id, tag_id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ select post0_.id as id1_0_, post0_.title as title2_0_ from post post0_ where post0_.title=? /*action=\u0026#39;FindPostsByTitle\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ select post0_.id as id1_0_0_, post0_.title as title2_0_0_ from post post0_ where post0_.id=? /*action=\u0026#39;FindPostById\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ Spring and Hibernate end-to-end example Source code This project uses the following JPA entities:\nPost_java  Tag_java   // In file Post.java package com.google.cloud.sqlcommenter.spring.hibernate.domain; import javax.persistence.*; import java.util.ArrayList; import java.util.List; @Entity @Table(name = \u0026#34;post\u0026#34;) public class Post { @Id @GeneratedValue private Long id; private String title; @ManyToMany @JoinTable( name = \u0026#34;post_tag\u0026#34;, joinColumns = @JoinColumn(name = \u0026#34;post_id\u0026#34;), inverseJoinColumns = @JoinColumn(name = \u0026#34;tag_id\u0026#34;)) private List\u0026lt;Tag\u0026gt; tags = new ArrayList\u0026lt;\u0026gt;(); public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getTitle() { return title; } public void setTitle(String title) { this.title = title; } public List\u0026lt;Tag\u0026gt; getTags() { return tags; } } // In file Tag.java package com.google.cloud.sqlcommenter.spring.hibernate.domain; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.Id; import javax.persistence.Table; @Entity @Table(name = \u0026#34;tag\u0026#34;) public class Tag { @Id @GeneratedValue private Long id; private String name; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } }   The DAO (Data Access Object) layer looks as follows:\nGenericDAO_java  GenericDAOImpl_java  PostDAO_java  PostDAOImpl_java  TagDAO_java  TagDAOImpl_java   // In file GenericDAO.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import java.io.Serializable; public interface GenericDAO\u0026lt;T, ID extends Serializable\u0026gt; { T findById(ID id); T save(T entity); } // In file GenericDAOImpl.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import org.hibernate.Session; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Repository; import org.springframework.transaction.annotation.Transactional; import java.io.Serializable; @Repository @Transactional public abstract class GenericDAOImpl\u0026lt;T, ID extends Serializable\u0026gt; implements GenericDAO\u0026lt;T, ID\u0026gt; { @Autowired private SessionFactory sessionFactory; private final Class\u0026lt;T\u0026gt; entityClass; protected SessionFactory getSessionFactory() { return sessionFactory; } protected Session getSession() { return sessionFactory.getCurrentSession(); } protected GenericDAOImpl(Class\u0026lt;T\u0026gt; entityClass) { this.entityClass = entityClass; } public Class\u0026lt;T\u0026gt; getEntityClass() { return entityClass; } @Override public T findById(ID id) { return getSession().get(entityClass, id); } @Override public T save(T entity) { getSession().persist(entity); return entity; } } // In file PostDAO.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Post; import java.util.List; public interface PostDAO extends GenericDAO\u0026lt;Post, Long\u0026gt; { List\u0026lt;Post\u0026gt; findByTitle(String title); } // In file PostDAOImpl.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Post; import org.springframework.stereotype.Repository; import java.util.List; @Repository public class PostDAOImpl extends GenericDAOImpl\u0026lt;Post, Long\u0026gt; implements PostDAO { protected PostDAOImpl() { super(Post.class); } @Override public List\u0026lt;Post\u0026gt; findByTitle(String title) { return getSession().createQuery( \u0026#34;select p from Post p where p.title = :title\u0026#34;, Post.class) .setParameter(\u0026#34;title\u0026#34;, title) .getResultList(); } } // In file TagDAO.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Tag; import java.util.List; public interface TagDAO extends GenericDAO\u0026lt;Tag, Long\u0026gt; { List\u0026lt;Tag\u0026gt; findByName(String... tags); } // In file TagDAOImpl.java  package com.google.cloud.sqlcommenter.spring.hibernate.dao; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Tag; import org.springframework.stereotype.Repository; import java.util.Arrays; import java.util.List; @Repository public class TagDAOImpl extends GenericDAOImpl\u0026lt;Tag, Long\u0026gt; implements TagDAO { protected TagDAOImpl() { super(Tag.class); } @Override public List\u0026lt;Tag\u0026gt; findByName(String... tags) { if (tags.length == 0) { throw new IllegalArgumentException(\u0026#34;There\u0026#39;s no tag name to search for!\u0026#34;); } return getSession() .createQuery( \u0026#34;select t \u0026#34; + \u0026#34;from Tag t \u0026#34; + \u0026#34;where t.name in :tags\u0026#34;) .setParameterList(\u0026#34;tags\u0026#34;, Arrays.asList(tags)) .list(); } }   The Service layer looks as follows:\nForumService_java  ForumServiceImpl_java   // In file ForumService.java  package com.google.cloud.sqlcommenter.spring.hibernate.service; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Post; import java.util.List; public interface ForumService { Post createPost(String title, String... tags); List\u0026lt;Post\u0026gt; findPostsByTitle(String title); Post findPostById(Long id); } // In file ForumServiceImpl.java  package com.google.cloud.sqlcommenter.spring.hibernate.service; import com.google.cloud.sqlcommenter.spring.hibernate.dao.PostDAO; import com.google.cloud.sqlcommenter.spring.hibernate.dao.TagDAO; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Post; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import java.util.List; @Service public class ForumServiceImpl implements ForumService { @Autowired private PostDAO postDAO; @Autowired private TagDAO tagDAO; @Override @Transactional public Post createPost(String title, String... tags) { Post post = new Post(); post.setTitle(title); post.getTags().addAll(tagDAO.findByName(tags)); return postDAO.save(post); } @Override @Transactional(readOnly = true) public List\u0026lt;Post\u0026gt; findPostsByTitle(String title) { return postDAO.findByTitle(title); } @Override @Transactional public Post findPostById(Long id) { return postDAO.findById(id); } }   The Spring Hibernate configuration looks as follows:\n// In file HibernateTransactionManagerConfiguration.java  package com.google.cloud.sqlcommenter.spring.hibernate; import com.zaxxer.hikari.HikariConfig; import com.zaxxer.hikari.HikariDataSource; import com.google.cloud.sqlcommenter.spring.util.SCHibernateWrapper; import org.hibernate.SessionFactory; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.*; import org.springframework.context.support.PropertySourcesPlaceholderConfigurer; import org.springframework.orm.hibernate5.HibernateTransactionManager; import org.springframework.orm.hibernate5.LocalSessionFactoryBean; import org.springframework.transaction.annotation.EnableTransactionManagement; import org.springframework.transaction.support.TransactionTemplate; import javax.sql.DataSource; import java.util.Properties; @Configuration @PropertySource({\u0026#34;/META-INF/jdbc-hsqldb.properties\u0026#34;}) @ComponentScan(basePackages = \u0026#34;com.google.cloud.sqlcommenter.spring.hibernate\u0026#34;) @EnableTransactionManagement @EnableAspectJAutoProxy public class HibernateTransactionManagerConfiguration { @Value(\u0026#34;${jdbc.dataSourceClassName}\u0026#34;) private String dataSourceClassName; @Value(\u0026#34;${jdbc.url}\u0026#34;) private String jdbcUrl; @Value(\u0026#34;${jdbc.username}\u0026#34;) private String jdbcUser; @Value(\u0026#34;${jdbc.password}\u0026#34;) private String jdbcPassword; @Value(\u0026#34;${hibernate.dialect}\u0026#34;) private String hibernateDialect; @Bean(destroyMethod = \u0026#34;close\u0026#34;) public DataSource actualDataSource() { Properties driverProperties = new Properties(); driverProperties.setProperty(\u0026#34;url\u0026#34;, jdbcUrl); driverProperties.setProperty(\u0026#34;user\u0026#34;, jdbcUser); driverProperties.setProperty(\u0026#34;password\u0026#34;, jdbcPassword); Properties properties = new Properties(); properties.put(\u0026#34;dataSourceClassName\u0026#34;, dataSourceClassName); properties.put(\u0026#34;dataSourceProperties\u0026#34;, driverProperties); properties.setProperty(\u0026#34;maximumPoolSize\u0026#34;, String.valueOf(3)); return new HikariDataSource(new HikariConfig(properties)); } @Bean public static PropertySourcesPlaceholderConfigurer properties() { return new PropertySourcesPlaceholderConfigurer(); } @Bean public DataSource dataSource() { return actualDataSource(); } @Bean public LocalSessionFactoryBean sessionFactory() { LocalSessionFactoryBean localSessionFactoryBean = new LocalSessionFactoryBean(); localSessionFactoryBean.setDataSource(dataSource()); localSessionFactoryBean.setPackagesToScan(packagesToScan()); localSessionFactoryBean.setHibernateProperties(additionalProperties()); return localSessionFactoryBean; } @Bean public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) { HibernateTransactionManager transactionManager = new HibernateTransactionManager(); transactionManager.setSessionFactory(sessionFactory); return transactionManager; } @Bean public TransactionTemplate transactionTemplate(SessionFactory sessionFactory) { return new TransactionTemplate(transactionManager(sessionFactory)); } protected Properties additionalProperties() { Properties properties = new Properties(); properties.setProperty(\u0026#34;hibernate.dialect\u0026#34;, hibernateDialect); properties.setProperty(\u0026#34;hibernate.hbm2ddl.auto\u0026#34;, \u0026#34;create-drop\u0026#34;); properties.put( \u0026#34;hibernate.session_factory.statement_inspector\u0026#34;, SCHibernateWrapper.class.getName() ); return properties; } protected String[] packagesToScan() { return new String[]{ \u0026#34;com.google.cloud.sqlcommenter.spring.hibernate.domain\u0026#34; }; } } Now, the test looks as follows:\n// In file HibernateTransactionManagerTest.java  package com.google.cloud.sqlcommenter.spring.hibernate; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Post; import com.google.cloud.sqlcommenter.spring.hibernate.domain.Tag; import com.google.cloud.sqlcommenter.spring.hibernate.service.ForumService; import com.google.cloud.sqlcommenter.spring.util.SCHibernateWrapper; import com.google.cloud.sqlcommenter.threadlocalstorage.State; import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.test.annotation.DirtiesContext; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; import org.springframework.transaction.TransactionException; import org.springframework.transaction.support.TransactionCallback; import org.springframework.transaction.support.TransactionTemplate; import javax.persistence.EntityManager; import javax.persistence.PersistenceContext; import java.util.List; import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull; import static org.junit.Assert.fail; @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = HibernateTransactionManagerConfiguration.class) @DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD) public class HibernateTransactionManagerTest { @Autowired private TransactionTemplate transactionTemplate; @PersistenceContext private EntityManager entityManager; @Autowired private ForumService forumService; @Before public void init() { try { transactionTemplate.execute((TransactionCallback\u0026lt;Void\u0026gt;) transactionStatus -\u0026gt; { Tag hibernate = new Tag(); hibernate.setName(\u0026#34;hibernate\u0026#34;); entityManager.persist(hibernate); Tag jpa = new Tag(); jpa.setName(\u0026#34;jpa\u0026#34;); entityManager.persist(jpa); return null; }); } catch (TransactionException e) { fail(e.getMessage()); } } @Test public void test() { State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;CreatePost\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); SCHibernateWrapper.reset(); Post newPost = forumService.createPost(\u0026#34;High-Performance Java Persistence\u0026#34;, \u0026#34;hibernate\u0026#34;, \u0026#34;jpa\u0026#34;); assertNotNull(newPost.getId()); List\u0026lt;String\u0026gt; sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(5, sqlStatements.size()); assertEquals( 5, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); SCHibernateWrapper.reset(); State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;FindPostsByTitle\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); List\u0026lt;Post\u0026gt; posts = forumService.findPostsByTitle(\u0026#34;High-Performance Java Persistence\u0026#34;); assertEquals(1, posts.size()); sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(1, sqlStatements.size()); assertEquals( 1, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;FindPostsByTitle\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); State.Holder.set( State.newBuilder() .withControllerName(\u0026#34;ForumController\u0026#34;) .withActionName(\u0026#34;FindPostById\u0026#34;) .withWebFramework(\u0026#34;spring\u0026#34;) .build() ); SCHibernateWrapper.reset(); Post post = forumService.findPostById(newPost.getId()); assertEquals(\u0026#34;High-Performance Java Persistence\u0026#34;, post.getTitle()); sqlStatements = SCHibernateWrapper.getAfterSqlStatements(); assertEquals(1, sqlStatements.size()); assertEquals( 1, sqlStatements .stream() .filter( sql -\u0026gt; sql.contains( \u0026#34;/*action=\u0026#39;FindPostById\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/\u0026#34; ) ) .count() ); } } When running the unit test above, we can see that the SQL statements include the comments as well:\nselect tag0_.id as id1_2_, tag0_.name as name2_2_ from tag tag0_ where tag0_.name in (? , ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ call next value for hibernate_sequence /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post (title, id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post_tag (post_id, tag_id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ insert into post_tag (post_id, tag_id) values (?, ?) /*action=\u0026#39;CreatePost\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ select post0_.id as id1_0_, post0_.title as title2_0_ from post post0_ where post0_.title=? /*action=\u0026#39;FindPostsByTitle\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ select post0_.id as id1_0_0_, post0_.title as title2_0_0_ from post post0_ where post0_.id=? /*action=\u0026#39;FindPostById\u0026#39;,controller=\u0026#39;ForumController\u0026#39;,framework=\u0026#39;spring\u0026#39;*/ References    Resource URL     Hibernate ORM project https://hibernate.org/orm/   sqlcommenter-java on Github https://github.com/google/sqlcommenter/tree/master/java/sqlcommenter-java    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/django/local/",
	"title": "Locally",
	"tags": ["python", "django", "local"],
	"description": "",
	"content": " Introduction Requirements Addition to your code References  Introduction This guide will help you add sqlcommenter to your Django applications running locally.\nPlease see the reference for the fields added in the SQL comments google-cloud-sqlcommenter.Fields\nRequirements    Steps Resource     Django https://docs.djangoproject.com/en/stable/intro/   google-cloud-sqlcommenter https://pypi.org/project/google-cloud-sqlcommenter   Django 2.X https://docs.djangoproject.com/en/stable/faq/install   Python 3.X https://www.python.org/downloads/    Addition to your code Firstly, please install google-cloud-sqlcommenter.\nFor any Django deployment, we can just edit our settings.py file and update the MIDDLEWARE section as per:\nMIDDLEWARE = [ \u0026#39;google.cloud.sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] References    Resource URL     Django quickstart https://docs.djangoproject.com/en/stable/intro/   Installing Django middleware /python/django#installation    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/django/",
	"title": "Django",
	"tags": ["python", "django"],
	"description": "",
	"content": "       Introduction Requirements Installation  pip install Source   Fields  Sample log entry Expected fields   References  Introduction This package is in the form of Django middleware whose purpose is to augment a SQL statement right before execution, with information about the controller and user code to help with later making database optimization decisions, after those statements are examined from the database server\u0026rsquo;s logs.\nThe middleware uses Django\u0026rsquo;s connection.execute_wrapper.\nRequirements The middleware uses Django\u0026rsquo;s connection.execute_wrapper and therefore requires Django 2.0 or later (which support various versions of Python 3).\nTo record OpenCensus information opencensus-ext-django, version 0.7 or greater, is required.\nInstallation This middleware can be installed by any of the following: pip  source   pip3 install google-cloud-sqlcommenter git clone https://github.com/google/sqlcommenter.git cd python/sqlcommenter-python \u0026amp;\u0026amp; python3 setup.py install   Enabling it Please edit your settings.py file to include google.cloud.sqlcommenter.django.middleware.SqlCommenter in your MIDDLEWARE section like this:\n--- settings.py +++ settings.py @@ -1,3 +1,4 @@ MIDDLEWARE = [ + \u0026#39;google.cloud.sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] Fields In the database server logs, the comment\u0026rsquo;s fields are:\n comma separated key-value pairs e.g. controller='index' values are SQL escaped i.e. key='value' URL-quoted except for the equals(=) sign e.g route='%5Epolls/%24'. so should be URL-unquoted when being consumed  Sample log entry After making a request into the middleware-enabled polls web-app.\n2019-05-28 11:54:50.780 PDT [64128] LOG: statement: INSERT INTO \u0026#34;polls_question\u0026#34; (\u0026#34;question_text\u0026#34;, \u0026#34;pub_date\u0026#34;) VALUES (\u0026#39;Wassup?\u0026#39;, \u0026#39;2019-05-28T18:54:50.767481+00:00\u0026#39;::timestamptz) RETURNING \u0026#34;polls_question\u0026#34;.\u0026#34;id\u0026#34; /*controller=\u0026#39;index\u0026#39;,framework=\u0026#39;django%3A2.2.1\u0026#39;,route=\u0026#39;%5Epolls/%24\u0026#39;*/ Expected Fields    Field Included by default? Description     app_name ❌ The application namespace of the matching URL pattern in your urls.py   controller ✔ The name of the matching URL pattern as described in your urls.py   db_driver ❌ The name of the Django database engine   framework ✔ The word \u0026ldquo;django\u0026rdquo; and the version of Django being used   route ✔ The route of the matching URL pattern as described in your urls.py   traceparent ❌ The W3C TraceContext.Traceparent field of the OpenCensus trace   tracestate ❌ The W3C TraceContext.Tracestate field of the OpenCensus trace    End to end examples Examples are based off the polls app from the Django introduction tutorial.\nSource code Defaults  With OpenCensus  With App Name  With DB Driver    # settings.py MIDDLEWARE = [ \u0026#39;sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] # polls/urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), ] # polls/views.py from django.http import HttpResponse from .models import Question def index(request): count = Question.objects.count() return HttpResponse(f\u0026#34;There are {count} questions in the DB.\\n\u0026#34;)   # settings.py INSTALLED_APPS = [ \u0026#39;opencensus.ext.django\u0026#39;, ... ] MIDDLEWARE = [ \u0026#39;opencensus.ext.django.middleware.OpencensusMiddleware\u0026#39;, \u0026#39;sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] OPENCENSUS = { \u0026#39;TRACE\u0026#39;: { \u0026#39;SAMPLER\u0026#39;: \u0026#39;opencensus.trace.samplers.AlwaysOnSampler()\u0026#39;, } } SQLCOMMENTER_WITH_CONTROLLER = False SQLCOMMENTER_WITH_FRAMEWORK = False SQLCOMMENTER_WITH_ROUTE = False SQLCOMMENTER_WITH_OPENCENSUS = True # polls/urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), ] # polls/views.py from django.http import HttpResponse from .models import Question def index(request): count = Question.objects.count() return HttpResponse(f\u0026#34;There are {count} questions in the DB.\\n\u0026#34;)   # settings.py MIDDLEWARE = [ \u0026#39;sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] SQLCOMMENTER_WITH_CONTROLLER = False SQLCOMMENTER_WITH_FRAMEWORK = False SQLCOMMENTER_WITH_ROUTE = False SQLCOMMENTER_WITH_APP_NAME = True # polls/urls.py from django.urls import path from . import apps, views app_name = apps.PollsConfig.name urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), ] # polls/views.py from django.http import HttpResponse from .models import Question def index(request): count = Question.objects.count() return HttpResponse(f\u0026#34;There are {count} questions in the DB.\\n\u0026#34;)   # settings.py MIDDLEWARE = [ \u0026#39;sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] SQLCOMMENTER_WITH_CONTROLLER = False SQLCOMMENTER_WITH_FRAMEWORK = False SQLCOMMENTER_WITH_ROUTE = False SQLCOMMENTER_WITH_DB_DRIVER = True # polls/urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.index, name=\u0026#39;index\u0026#39;), ] # polls/views.py from django.http import HttpResponse from .models import Question def index(request): count = Question.objects.count() return HttpResponse(f\u0026#34;There are {count} questions in the DB.\\n\u0026#34;)    From the command line, we run the django development server in one terminal:\n# python manage.py runserver And we use curl to make an HTTP request in another:\n# curl http://127.0.0.1:8000/polls/ Results Examining our Postgresql server logs, with the various options\nDefaults  With OpenCensus  With App Name  With DB Driver   2019-07-19 14:27:51.370 -03 [41382] LOG: statement: SELECT COUNT(*) AS \u0026#34;__count\u0026#34; FROM \u0026#34;polls_question\u0026#34; /*controller=\u0026#39;index\u0026#39;,framework=\u0026#39;django%3A2.2.3\u0026#39;,route=\u0026#39;polls/\u0026#39;*/ 2019-07-19 17:39:27.430 -03 [46170] LOG: statement: SELECT COUNT(*) AS \u0026#34;__count\u0026#34; FROM \u0026#34;polls_question\u0026#34; /*traceparent=\u0026#39;00-fd720cffceba94bbf75940ff3caaf3cc-4fd1a2bdacf56388-01\u0026#39;*/ 2019-07-19 15:31:33.681 -03 [42962] LOG: statement: SELECT COUNT(*) AS \u0026#34;__count\u0026#34; FROM \u0026#34;polls_question\u0026#34; /*app_name=\u0026#39;polls\u0026#39;*/ 2019-07-19 14:47:53.066 -03 [41602] LOG: statement: SELECT COUNT(*) AS \u0026#34;__count\u0026#34; FROM \u0026#34;polls_question\u0026#34; /*db_driver=\u0026#39;django.db.backends.postgresql\u0026#39;*/   References    Resource URL     Django https://www.djangoproject.com/   OpenCensus https://opencensus.io/   opencensus-ext-django https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-django   sqlcommenter on PyPi https://pypi.org/project/google-cloud-sqlcommenter   sqlcommenter on Github https://github.com/google/sqlcommenter    "
},
{
	"uri": "https://google.github.io/sqlcommenter/node/knex/",
	"title": "Knex.js",
	"tags": ["knex", "knex.js", "query-builder", "node", "node.js", "express", "express.js"],
	"description": "",
	"content": " Introduction Requirements Installation  Manually Package manager   Usage  Plain knex wrapper Express middleware   Fields  Options  include config options config Options examples     End to end examples  Source code Results References    Introduction This package is in the form of Knex.Client.prototype.query wrapper whose purpose is to augment a SQL statement right before execution, with information about the controller and user code to help correlate them with SQL statements emitted by Knex.js.\nBesides plain knex.js wrapping, we also provide a wrapper for the following frameworks:\n  Requirements    Name Resource     Knex.js https://knexjs.org/   Node.js https://nodejs.org/    Installation We can add integration into our applications in the following ways:\nManually Please read installing sqlcommenter-nodejs from source\nPackage manager Add to your package.json the dependency { \u0026#34;@google-cloud/sqlcommenter-knex\u0026#34;: \u0026#34;*\u0026#34; } and then run npm install to get the latest version or npm install @google-cloud/sqlcommenter-knex --save\nUsage Plain knex wrapper const {wrapMainKnex} = require(\u0026#39;@google-cloud/sqlcommenter-knex\u0026#39;); const Knex = require(\u0026#39;knex\u0026#39;); wrapMainKnex(Knex); // Now you can create the knex client. const knex = Knex(options);  Express middleware This wrapper/middleware can be used as is or better with express.js const {wrapMainKnexAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-knex\u0026#39;); const Knex = require(\u0026#39;knex\u0026#39;); const app = require(\u0026#39;express\u0026#39;)(); // This is the important step where we set the middleware. app.use(wrapMainKnexAsMiddleware(Knex)); // Now you can create the knex client. const knex = Knex(options); \nFields In the database server logs, the comment\u0026rsquo;s fields are:\n comma separated key-value pairs e.g. route='%5Epolls/%24' values are SQL escaped i.e. key='value' URL-quoted except for the equals(=) sign e.g route='%5Epolls/%24'. so should be URL-unquoted     Field Format Description Example     db_driver \u0026lt;database_driver\u0026gt;:\u0026lt;version\u0026gt; URL quoted name and version of the database driver db_driver='knex%3A0.16.5'   route \u0026lt;the route used\u0026gt; URL quoted route used to match the express.js controller route='%5E%2Fpolls%2F   traceparent \u0026lt;traceparent header\u0026gt; URL quoted W3C traceparent header traceparent='00-3e2914ebce6af09508dd1ff1128493a8-81d09ab4d8cde7cf-01'   tracestate \u0026lt;tracestate header\u0026gt; URL quoted W3C tracestate header tracestate='rojo%253D00f067aa0ba902b7%2Ccongo%253Dt61rcWkgMzE'    Options When creating the middleware, one can optionally configure the injected comments by passing in the include and options objects:\nwrapMainKnexAsMiddleware(Knex, include={...}, options={...}); include config A map of values to be optionally included in the SQL comments.\n   Field On by default     db_driver \u0026#10060;    route \u0026#10004;    traceparent \u0026#10060;    tracestate \u0026#10060;     options config A configuration object specifying where to collect trace data from. Accepted fields are: TraceProvider: Should be OpenTelemetry, indicating which library to collect trace context from.\n   Field Possible values     TraceProvider OpenTelemetry    Options examples trace attributes  route  db_driver  all set   wrapMainKnexAsMiddleware( Knex, include={ traceparent: true, tracestate: true }, options={ TraceProvider: \u0026#39;OpenTelemetry\u0026#39; } );  wrapMainKnexAsMiddleware(Knex, include={route: true});  wrapMainKnexAsMiddleware(Knex, include={db_driver: true});  // Manually set all the variables. wrapMainKnexAsMiddleware( Knex, include={ db_driver: true, route: true, traceparent: true, tracestate: true, }, options={ TraceProvider: \u0026#39;OpenTelemetry\u0026#39; } );    End to end examples Check out a full express + opentelemetry example here.\nSource code With OpenTelemetry  With Route  With DB Driver  With All Options Set   // In file app.js. const { NodeTracerProvider } = require(\u0026#34;@opentelemetry/node\u0026#34;); const { BatchSpanProcessor } = require(\u0026#34;@opentelemetry/tracing\u0026#34;); const { TraceExporter, } = require(\u0026#34;@google-cloud/opentelemetry-cloud-trace-exporter\u0026#34;); const tracerProvider = new NodeTracerProvider(); // Export to Google Cloud Trace tracerProvider.addSpanProcessor( new BatchSpanProcessor(new TraceExporter({ logger }), { bufferSize: 500, bufferTimeout: 5 * 1000, }) ); tracerProvider.register(); // OpenTelemetry initialization should happen before importing any libraries // that it instruments const express = require(\u0026#34;express\u0026#34;); const Knex = require(\u0026#34;knex\u0026#34;); const { wrapMainKnexAsMiddleware } = require(\u0026#34;@google-cloud/sqlcommenter-knex\u0026#34;); const knexOptions = { client: \u0026#39;postgresql\u0026#39;, connection: { host: \u0026#39;127.0.0.1\u0026#39;, password: \u0026#39;$postgres$\u0026#39;, database: \u0026#39;quickstart_nodejs\u0026#39; } }; const knex = Knex(knexOptions); // knex instance  const app = express(); const port = process.env.APP_PORT || 3000; // SQLCommenter express middleware injects the route into the traces app.use( wrapMainKnexAsMiddleware( Knex, { traceparent: true, tracestate: true, // Optional  db_driver: false, route: false, }, { TraceProvider: \u0026#34;OpenTelemetry\u0026#34; } ) ); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { knex.raw(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js. const Knex = require(\u0026#39;knex\u0026#39;); // Knex to be wrapped say v0.0.1 const {wrapMainKnexAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-knex\u0026#39;); const express = require(\u0026#39;express\u0026#39;); const options = { client: \u0026#39;postgresql\u0026#39;, connection: { host: \u0026#39;127.0.0.1\u0026#39;, password: \u0026#39;$postgres$\u0026#39;, database: \u0026#39;quickstart_nodejs\u0026#39; } }; const knex = Knex(options); // knex instance  const app = express(); const port = process.env.APP_PORT || 3000; // Use the knex+express middleware with route app.use(wrapMainKnexAsMiddleware(Knex, {route: true})); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { knex.raw(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js const Knex = require(\u0026#39;knex\u0026#39;); // Knex to be wrapped say v0.0.1 const {wrapMainKnexAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-knex\u0026#39;); const express = require(\u0026#39;express\u0026#39;); const options = { client: \u0026#39;postgresql\u0026#39;, connection: { host: \u0026#39;127.0.0.1\u0026#39;, password: \u0026#39;$postgres$\u0026#39;, database: \u0026#39;quickstart_nodejs\u0026#39; } }; const knex = Knex(options); // knex instance  const app = express(); const port = process.env.APP_PORT || 3000; // Use the knex+express middleware with db driver app.use(wrapMainKnexAsMiddleware(Knex, {db_driver: true})); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { knex.raw(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js. const { NodeTracerProvider } = require(\u0026#34;@opentelemetry/node\u0026#34;); const { BatchSpanProcessor } = require(\u0026#34;@opentelemetry/tracing\u0026#34;); const { TraceExporter, } = require(\u0026#34;@google-cloud/opentelemetry-cloud-trace-exporter\u0026#34;); const tracerProvider = new NodeTracerProvider(); // Export to Google Cloud Trace tracerProvider.addSpanProcessor( new BatchSpanProcessor(new TraceExporter({ logger }), { bufferSize: 500, bufferTimeout: 5 * 1000, }) ); tracerProvider.register(); // OpenTelemetry initialization should happen before importing any libraries // that it instruments const express = require(\u0026#34;express\u0026#34;); const Knex = require(\u0026#34;knex\u0026#34;); const { wrapMainKnexAsMiddleware } = require(\u0026#34;@google-cloud/sqlcommenter-knex\u0026#34;); const knexOptions = { client: \u0026#39;postgresql\u0026#39;, connection: { host: \u0026#39;127.0.0.1\u0026#39;, password: \u0026#39;$postgres$\u0026#39;, database: \u0026#39;quickstart_nodejs\u0026#39; } }; const knex = Knex(knexOptions); // knex instance  const app = express(); const port = process.env.APP_PORT || 3000; // SQLCommenter express middleware injects the route into the traces app.use( wrapMainKnexAsMiddleware( Knex, { traceparent: true, tracestate: true, // Optional  db_driver: true, route: true, }, { TraceProvider: \u0026#34;OpenTelemetry\u0026#34; } ) ); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { knex.raw(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));    which after running by\n$ node app.js Application listening on 3000 Results On making a request to that server at http://localhost:3000/polls/1000, the PostgreSQL logs show:\nWith OpenTelemetry  With Route  With DB Driver  With All Options Set   2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*traceparent=\u0026#39;00-11000000000000ff-020000ee-01\u0026#39;,tracestate=\u0026#39;brazzaville=t61rcWkgMzE,rondo=00f067aa0ba902b7\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*route=\u0026#39;%5E%2Fpolls%2F%1000\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*db_driver=\u0026#39;knex%3A0.0.1\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*db_driver=\u0026#39;knex%3A0.0.1\u0026#39;,route=\u0026#39;%5E%2Fpolls%2F%1000\u0026#39;,traceparent=\u0026#39;00-11000000000000ff-020000ee-01\u0026#39;,tracestate=\u0026#39;brazzaville=t61rcWkgMzE,rondo=00f067aa0ba902b7\u0026#39;*/   References    Resource URL     @google-cloud/sqlcommenter-knex on npm https://www.npmjs.com/package/@google-cloud/sqlcommenter-knex   express.js https://expressjs.com/    "
},
{
	"uri": "https://google.github.io/sqlcommenter/node/sequelize/",
	"title": "Sequelize.js",
	"tags": ["sequelize", "sequelize.js", "query-builder", "node", "node.js", "express", "express.js"],
	"description": "",
	"content": " Introduction Requirements Installation  Manually Package manager   Usage  Plain sequelize wrapper Express middleware   Fields  Options  include config options config Options examples     End to end examples  Source code Results References    Introduction This package is in the form of Sequelize.Client.prototype.query wrapper whose purpose is to augment a SQL statement right before execution, with information about the controller and user code to help correlate them with SQL statements emitted by Sequelize.js.\nBesides plain sequelize.js wrapping, we also provide a wrapper for the following frameworks:\n  Requirements  Sequelize.js Node.js  Installation We can add integration into our applications in the following ways:\nManually Please read installing sqlcommenter-nodejs from source\nPackage manager Add to your package.json the dependency { \u0026#34;@google-cloud/sqlcommenter-sequelize\u0026#34;: \u0026#34;*\u0026#34; }\nand then run npm install to get the latest version or\nnpm install @google-cloud/sqlcommenter-sequelize --save Usage Plain sequelize wrapper const {wrapSequelize} = require(\u0026#39;@google-cloud/sqlcommenter-sequelize\u0026#39;); const Sequelize = require(\u0026#39;sequelize\u0026#39;); // Create the sequelize client. const sequelize = new Sequelize(options); // Finally wrap the sequelize client. wrapSequelize(sequelize);  Express middleware This wrapper/middleware can be used as is or better with express.js const {wrapSequelizeAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-sequelize\u0026#39;); const Sequelize = require(\u0026#39;sequelize\u0026#39;); const sequelize = new Sequelize(options); const app = require(\u0026#39;express\u0026#39;)(); // Use the sequelize+express middleware. app.use(wrapSequelizeAsMiddleware(sequelize)); \nFields In the database server logs, the comment\u0026rsquo;s fields are:\n comma separated key-value pairs e.g. route='%5E%2Fpolls%2F' values are SQL escaped i.e. key='value' URL-quoted except for the equals(=) sign e.g route='%5Epolls/%24'. so should be URL-unquoted     Field Format Description Example     client_timezone \u0026lt;string\u0026gt; URL quoted name of the timezone used when converting a date from the database into a JavaScript date '+00:00'   db_driver \u0026lt;sequelize\u0026gt; URL quoted name and version of the database driver db_driver='sequelize'   route \u0026lt;the route used\u0026gt; URL quoted route used to match the express.js controller route='%5E%2Fpolls%2F   traceparent \u0026lt;traceparent header\u0026gt; URL quoted W3C traceparent header traceparent='00-3e2914ebce6af09508dd1ff1128493a8-81d09ab4d8cde7cf-01'   tracestate \u0026lt;tracestate header\u0026gt; URL quoted W3C tracestate header tracestate='rojo%253D00f067aa0ba902b7%2Ccongo%253Dt61rcWkgMzE'    Options When creating the middleware, one can optionally configure the injected comments by passing in the include and options objects:\nwrapMainSequelizeAsMiddleware(Sequelize, include={...}, options={...}); include config A map of values to be optionally included in the SQL comments.\n   Field On by default     client_timezone \u0026#10060;    db_driver \u0026#10060;    route \u0026#10004;    traceparent \u0026#10060;    tracestate \u0026#10060;     options config A configuration object specifying where to collect trace data from. Accepted fields are: TraceProvider: Should be OpenTelemetry, indicating which library to collect trace context from.\n   Field Possible values     TraceProvider OpenTelemetry    Options examples trace attributes  client_timezone  route  db_driver  all set   wrapMainSequelizeAsMiddleware( Sequelize, include={ traceparent: true, tracestate: true }, options={ TraceProvider: \u0026#39;OpenTelemetry\u0026#39; } );  wrapMainSequelizeAsMiddleware(Sequelize, include={client_timezone: true});  wrapMainSequelizeAsMiddleware(Sequelize, include={route: true});  wrapMainSequelizeAsMiddleware(Sequelize, include={db_driver: true});  // Manually set all the variables. wrapMainSequelizeAsMiddleware( Sequelize, include={ client_timezone: true, db_driver: true, route: true, traceparent: true, tracestate: true, }, options={ TraceProvider: \u0026#39;OpenTelemetry\u0026#39; } );    End to end examples Check out a full express + opentelemetry example here.\nSource code With OpenTelemetry  With Route  With DB Driver and CLIENT TIMEZONE  With All Options Set   // In file app.js. const { NodeTracerProvider } = require(\u0026#34;@opentelemetry/node\u0026#34;); const { BatchSpanProcessor } = require(\u0026#34;@opentelemetry/tracing\u0026#34;); const { TraceExporter, } = require(\u0026#34;@google-cloud/opentelemetry-cloud-trace-exporter\u0026#34;); const tracerProvider = new NodeTracerProvider(); // Export to Google Cloud Trace tracerProvider.addSpanProcessor( new BatchSpanProcessor(new TraceExporter({ logger }), { bufferSize: 500, bufferTimeout: 5 * 1000, }) ); tracerProvider.register(); // OpenTelemetry initialization should happen before importing any libraries // that it instruments const { Sequelize } = require(\u0026#34;sequelize\u0026#34;); const { wrapSequelizeAsMiddleware, } = require(\u0026#34;@google-cloud/sqlcommenter-sequelize\u0026#34;); const sequelize = new Sequelize(\u0026#34;postgres://user:pass@example.com:5432/dbname\u0026#34;); const express = require(\u0026#34;express\u0026#34;); const app = express(); const port = process.env.APP_PORT || 3000; // SQLCommenter express middleware injects the route into the traces app.use( wrapSequelizeAsMiddleware( sequelize, { client_timezone: false, db_driver: false, route: true, traceparent: true, tracestate: true, }, { TraceProvider: \u0026#34;OpenTelemetry\u0026#34; } ) ); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; res.send(\u0026#34;Hello, sqlcommenter-nodejs!!\u0026#34;)); app.get(\u0026#34;^/polls/:param\u0026#34;, function (req, res) { sequelize .query(\u0026#34;SELECT * from polls_question\u0026#34;) .then(function (polls) { const blob = JSON.stringify(polls); res.send(blob); }) .catch(function (err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js. const Sequelize = require(\u0026#39;sequelize\u0026#39;); const {wrapSequelizeAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-sequelize\u0026#39;); const express = require(\u0026#39;express\u0026#39;); // Using a connection URI const sequelize = new Sequelize(\u0026#39;postgres://user:pass@example.com:5432/dbname\u0026#39;); const app = express(); const port = process.env.APP_PORT || 3000; // Use the sequelize+express middleware with route app.use(wrapSequelizeAsMiddleware(sequelize, {route: true})); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { sequelize.query(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js const Sequelize = require(\u0026#39;sequelize\u0026#39;); const {wrapSequelizeAsMiddleware} = require(\u0026#39;@google-cloud/sqlcommenter-sequelize\u0026#39;); const express = require(\u0026#39;express\u0026#39;); // Using a connection URI const sequelize = new Sequelize(\u0026#39;postgres://user:pass@example.com:5432/dbname\u0026#39;); const app = express(); const port = process.env.APP_PORT || 3000; // Use the sequelize+express middleware with db driver and timezone app.use(wrapSequelizeAsMiddleware(sequelize, { db_driver: true, client_timezone: true })); app.get(\u0026#39;/\u0026#39;, (req, res) =\u0026gt; res.send(\u0026#39;Hello, sqlcommenter-nodejs!!\u0026#39;)); app.get(\u0026#39;^/polls/:param\u0026#39;, function(req, res) { sequelize.query(\u0026#39;SELECT * from polls_question\u0026#39;).then(function(polls) { const blob = JSON.stringify(polls); res.send(blob); }).catch(function(err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));  // In file app.js. const { NodeTracerProvider } = require(\u0026#34;@opentelemetry/node\u0026#34;); const { BatchSpanProcessor } = require(\u0026#34;@opentelemetry/tracing\u0026#34;); const { TraceExporter, } = require(\u0026#34;@google-cloud/opentelemetry-cloud-trace-exporter\u0026#34;); const tracerProvider = new NodeTracerProvider(); // Export to Google Cloud Trace tracerProvider.addSpanProcessor( new BatchSpanProcessor(new TraceExporter({ logger }), { bufferSize: 500, bufferTimeout: 5 * 1000, }) ); tracerProvider.register(); // OpenTelemetry initialization should happen before importing any libraries // that it instruments const { Sequelize } = require(\u0026#34;sequelize\u0026#34;); const { wrapSequelizeAsMiddleware, } = require(\u0026#34;@google-cloud/sqlcommenter-sequelize\u0026#34;); const sequelize = new Sequelize(\u0026#34;postgres://user:pass@example.com:5432/dbname\u0026#34;); const express = require(\u0026#34;express\u0026#34;); const app = express(); const port = process.env.APP_PORT || 3000; // SQLCommenter express middleware injects the route into the traces app.use( wrapSequelizeAsMiddleware( sequelize, { client_timezone: true, db_driver: true, route: true, traceparent: true, tracestate: true, }, { TraceProvider: \u0026#34;OpenTelemetry\u0026#34; } ) ); app.get(\u0026#34;/\u0026#34;, (req, res) =\u0026gt; res.send(\u0026#34;Hello, sqlcommenter-nodejs!!\u0026#34;)); app.get(\u0026#34;^/polls/:param\u0026#34;, function (req, res) { sequelize .query(\u0026#34;SELECT * from polls_question\u0026#34;) .then(function (polls) { const blob = JSON.stringify(polls); res.send(blob); }) .catch(function (err) { console.log(err); res.send(500); }); }); app.listen(port, () =\u0026gt; console.log(`Application listening on ${port}`));    which after running by\n$ node app.js Application listening on 3000 Results On making a request to that server at http://localhost:3000/polls/1000, the PostgreSQL logs show:\nWith OpenTelemetry  With Route  With DB Driver and CLIENT TIMEZONE  With All Set   2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*traceparent=\u0026#39;00-11000000000000ff-020000ee-01\u0026#39;,tracestate=\u0026#39;brazzaville=t61rcWkgMzE,rondo=00f067aa0ba902b7\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*route=\u0026#39;%5E%2Fpolls%2F%1000\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*client_timezone:\u0026#39;%2B00%3A00\u0026#39;,db_driver=\u0026#39;sequelize%3A0.0.1\u0026#39;*/ 2019-06-03 14:32:10.842 PDT [32004] LOG: statement: SELECT * from polls_question /*client_timezone:\u0026#39;%2B00%3A00\u0026#39;,db_driver=\u0026#39;sequelize%3A0.0.1\u0026#39;,route=\u0026#39;%5E%2Fpolls%2F%1000\u0026#39;,traceparent=\u0026#39;00-11000000000000ff-020000ee-01\u0026#39;,tracestate=\u0026#39;brazzaville=t61rcWkgMzE,rondo=00f067aa0ba902b7\u0026#39;*/   References    Resource URL     @google-cloud/sqlcommenter-sequelize on npm https://www.npmjs.com/package/@google-cloud/sqlcommenter-sequelize   express.js https://expressjs.com/    "
},
{
	"uri": "https://google.github.io/sqlcommenter/spec/",
	"title": "Specification",
	"tags": [],
	"description": "",
	"content": " Introduction Format Comment escaping Meta characters  Algorithm   Key-Value serialization  Key serialization  Algorithm   Value serialization  Algorithm     Sorting  Algorithm Exhibit   Concatenation  Separator Algorithm Exhibit   Affix comment  Algorithm Exhibit   SQL commenter  Exhibit   Parsing  Algorithm Exhibit   References  Introduction This section defines the SQL commenter algorithm which augments a SQL statement with a comment containing serialized key value pairs that are retrieved from the various ORMs and frameworks in your programming language and environment of choice.\nA preview of the result can be seen as per exhibit\nSELECT * FROM FOO /*action=\u0026#39;%2Fparam*d\u0026#39;,controller=\u0026#39;index,\u0026#39;framework=\u0026#39;spring\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/ Read along to see how you can conform to the specification and produce similar output.\nFormat The final comment SHOULD be affixed to the final SQL statement in the format\n\u0026lt;SQL STATEMENT\u0026gt; /*\u0026lt;ATTRIBUTE_KEY_VALUE_PAIRS\u0026gt;*/ Comment escaping Comments within SQL comments are of the format\n Following -- e.g. SELECT * from FOO -- this is the comment Contained within /* and */ e.g. SELECT * from FOO /* this is the comment */  If a comment already exists within a SQL statement, we MUST NOT mutate that statement.\nSeparator Each key value pair MUST be separated by a comma \u0026ldquo;,\u0026rdquo; so for example, given\nValues: [\u0026lt;FIELD_1\u0026gt;, \u0026lt;FIELD_2\u0026gt;, \u0026lt;FIELD_3\u0026gt;, ...]\nExpected concatenation result: \u0026lt;FIELD_1\u0026gt;,\u0026lt;FIELD_2\u0026gt;,\u0026lt;FIELD_3\u0026gt;,\u0026lt;FIELD_N...\u0026gt;\nMeta characters Meta characters such as ' should be escaped with a slash \\. That creates the following algorithm:\nAlgorithm algorithm(value): escaped := value.escape_with_slash_any_of(\u0026#39;) return escaped Key serialization  URL encode the key e.g. given route parameter, that\u0026rsquo;ll become route%20parameter  Which produces the following algorithm:\nAlgorithm key_serialization(key): encoded := url_encode(key) meta_escaped := escape_meta_characters(encoded) return meta_escaped Value serialization   URL encode the value e.g. given /param first, that SHOULD become %2Fparam%20first\n  Escape meta-characters within the raw value; a single quote ' becomes \\'\n  SQL escape the value by placing it within two single quotes e.g.\nDROP should become 'DROP'\nFOO 'BAR should become 'FOO%20\\'BAR'\n  And when generalized into an algorithm:\nAlgorithm value_serialization(value): encoded := url_encode(value) meta_escaped := escape_meta_characters(encoded) final := sql_escape_with_single_quotes(meta_escaped) return final and running the algorithm on the following table will produce\n   value url_encode(value) sql_escape_with_single_quotes     DROP TABLE FOO DROP%20TABLE%20FOO 'DROP%20TABLE%20FOO'   /param first %2Fparam%20first '%2Fparam%20first'   1234 1234 '1234'    Key Value format Given a key value pair (key, value):\n  Run the Key serialization algorithm on key\n  Run the Value serialization algorithm on value\n  Using an equals sign =, concatenate the result from 1. and 2. to give\n\u0026lt;SERIALIZED_KEY\u0026gt;=\u0026lt;SERIALIZED_VALUE\u0026gt; gotten from:\nserialize_key(key)=serialize_value(value)\n  Thus given for example the following key value pairs\n   key value pair serialized_key serialized_value Final     route=/polls 1000 route '%2Fpolls%201000' route='%2Fpolls%201000'   name='DROP TABLE FOO' route '%2Fpolls%201000' route='%2Fpolls%201000'   name''=\u0026quot;DROP TABLE USERS'\u0026quot; name='' DROP%20TABLE%20USERS' name=''=\u0026lsquo;DROP%20TABLE%20USERS'\u0026rsquo;    Sorting With a list of serialized key=value pairs, sort them by lexicographic order.\nAlgorithm sort(key_value_pairs): sorted = lexicographically_sort(key_value_pairs) return sorted Exhibit Thus\nsort([ traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;, route=\u0026#39;%2Fparam*d\u0026#39;, controller=\u0026#39;index\u0026#39;, ]) produces\n[ controller=\u0026#39;index\u0026#39;, route=\u0026#39;%2Fparam*d\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;, ] Concatenation After all the keys and values have been serialized and sorted, they MUST be joined by a comma ,.\nIf no values are present, concatenate MUST return the empty value ''\nAlgorithm concatenate(key_value_pairs): if len(key_value_pairs) == 0: return \u0026#39;\u0026#39; return \u0026#39;,\u0026#39;.join(key_value_pairs) Exhibit Therefore\nconcatenate([ controller=\u0026#39;index\u0026#39;, route=\u0026#39;%2Fparam*d\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;, ]) produces\ncontroller=\u0026#39;index\u0026#39;,route=\u0026#39;%2Fparam*d\u0026#39;,traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;,tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39; Affix comment After serialization, sorting, concatenation, the final form MUST be placed between /* and */\nAlgorithm affix_comment(sql, concatenated): if is_empty(concatenated): return sql // Do NOT modify the SQL if concatenated is blank. affixed := sql + \u0026#39;/*\u0026#39; + concatenated + \u0026#39;*/\u0026#39; return affixed Exhibit for example given\naffix_comment(\u0026#39;SELECT * from FOO\u0026#39;, \u0026#39;\u0026#39;) produces\nSELECT * from FOO affix_comment(\u0026#39;SELECT * from FOO\u0026#39;, \u0026#34;route=\u0026#39;%2Fparam*d\u0026#39;\u0026#34;) produces\nSELECT * from FOO /*route=\u0026#39;%2Fparam*d\u0026#39;*/ SQL commenter Wrapping all the steps together, we thus have the following algorithm\nsql_commenter(sql, attributes): if contains_sql_comment(sql): return sql # DO NOT mutate a statement with an already present comment. serialized_key_value_pairs := [] for each attribute in attributes: serialized := serialize_key_value_pair(attribute) if serialized: serialized_key_value_pairs.append(serialized) sorted := sort(serialized_key_value_pairs) concatenated := concatenate(sorted) final := affix_comment(sql, concatenated) return final Exhibit Running sql_commenter on an ORM integration that extracts the respective attributes:\nsql_commenter(\u0026#39;SELECT * FROM FOO\u0026#39;, [ tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, framework=\u0026#39;spring\u0026#39;, action=\u0026#39;%2Fparam*d\u0026#39;, controller=\u0026#39;index\u0026#39;, ]) finally produces\nSELECT * FROM FOO /*action=\u0026#39;%2Fparam*d\u0026#39;,controller=\u0026#39;index,\u0026#39;framework=\u0026#39;spring\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/ Parsing Parsing is the step to reverse sql-commenter and extract the key value attributes.\nIt\u0026rsquo;ll follow the following steps:\n Find the last comment so search for and strip out /* and */ Split the comment by comma , Split each key='value' pair so extract key and 'value'  3.1. For key, unescape_meta_characters then url_decode 3.2. For value, sql_unescape/trim the ' at the beginning and end of 'value' -\u0026gt; value  3.2.1. Unescape the meta characters in value 3.2.2. URL Decode the value      Algorithm parse(sql_with_comment): if !contains_sql_comment(sql_with_comment): return sql_with_comment, null // Since we now have a SQL comment, let\u0026#39;s extract the serialized attributes.  sql_stmt, serialized_attrs := extract_sql_commenter(sql_with_comment) if is_empty(serialized_attrs): return sql_stmt, null attrs := {} kv_splits := split_by_comma(serialized_attrs) for kv in kv_splits: e_key, e_value := split_by_equals(kv) key := decode_key(e_key) value := decode_value(e_value) attrs[key] = value // Some attributes such as traceparent, tracestate, sampled  // might need need some grouping and reconstruction.  final := deconstruct_and_group_attributes(attrs) return sql_stmt, final Exhibit Given the value from SQLCommenter exhibit\nSELECT * FROM FOO /*action=\u0026#39;%2Fparam*d\u0026#39;,controller=\u0026#39;index,\u0026#39;framework=\u0026#39;spring\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/ Running parse on the value\nsql, attributes = parse(`SELECT * FROM FOO /*action=\u0026#39;%2Fparam*d\u0026#39;,controller=\u0026#39;index,\u0026#39;framework=\u0026#39;spring\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/`) produces\nsql: SELECT * FROM FOO attributes: { controller: \u0026#39;index\u0026#39;, framework: \u0026#39;spring\u0026#39;, action: \u0026#39;/param*d\u0026#39;, trace: { sampled: true, span_id: \u0026#39;c532cb4098ac3dd2\u0026#39;, trace_id: \u0026#39;5bd66ef5095369c7b0d1f8f4bd33716a\u0026#39;, trace_state: [{\u0026#39;congo\u0026#39;: \u0026#39;t61rcWkgMzE\u0026#39;}, {\u0026#39;rojo\u0026#39;: \u0026#39;00f067aa0ba902b7\u0026#39;}], }, } References    Resource URL     URL Encoding https://en.wikipedia.org/wiki/Percent-encoding   Comments within SQL comments https://docs.oracle.com/cd/B12037_01/server.101/b10759/sql_elements006.htm    "
},
{
	"uri": "https://google.github.io/sqlcommenter/java/spring/",
	"title": "Spring",
	"tags": [],
	"description": "",
	"content": " Introduction Requirements Dependency management  Manually Package management   Expected fields Using it  Spring 5 Before Spring 5   XML based configuration Hibernate References  Introduction We provide an integration for the Spring framework. The integration is an interceptor that will record properties about your MVC application per HTTP request, and then later those properties will be picked up by the actual ORMs and augment your SQL statements. It is best used with the following ORM integrations:\n  Requirements  Java 8+ Successfully installed sqlcommenter-java  Dependency management We can add the integration to our applications in the following ways:\nManually Please read installing sqlcommenter-java from source\nPackage management Please include this in your dependency management system as follows\nMaven  Gradle   \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.google.cloud\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;sqlcommenter-java\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; // https://mvnrepository.com/artifact/com.google.cloud/sqlcommenter-java compile group: \u0026#39;com.google.cloud\u0026#39;, name: \u0026#39;sqlcommenter-java\u0026#39;, version: \u0026#39;0.0.1\u0026#39;   Expected fields When coupled say with sqlcommenter for Hibernate, the following fields will be added to your SQL statement as comments\n   Field Description     action The name of the command that execute the logical behavior e.g. '/fees'   controller The name of your controller e.g. 'fees_controller'   web_framework The name of the framework, it will always be 'spring'    Using it There are 2 different flavors of Spring \u0026ndash; Spring 5 and later vs before Spring 5. Please read along to see how to enable it for the different versions:\nSpring 5 If using Spring 5, please import the SpringSQLCommenterInterceptor class by:\nimport com.google.cloud.sqlcommenter.interceptors.SpringSQLCommenterInterceptor; @EnableWebMvc @Configuration public class WebConfig implements WebMvcConfigurer { @Bean public SpringSQLCommenterInterceptor sqlInterceptor() { return new SpringSQLCommenterInterceptor(); } @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(sqlInterceptor()); } } Before Spring 5 If using a version before Spring 5, your WebConfig class needs to extend the WebMVCConfigureAdapter class instead like this:\nimport com.google.cloud.sqlcommenter.interceptors.SpringSQLCommenterInterceptor; @EnableWebMvc @Configuration public class WebConfig extends WebMvcConfigureAdapter { @Bean public SpringSQLCommenterInterceptor sqlInterceptor() { return new SpringSQLCommenterInterceptor(); } @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(sqlInterceptor()); } } XML based configuration You can add the interceptor as a bean in your XML configuration\nFor_Every_Method  Method_Specific   \u0026lt;mvc:interceptors\u0026gt; \u0026lt;bean class=\u0026#34;com.google.cloud.sqlcommenter.interceptors.SpringSQLCommenterInterceptor\u0026#34;\u0026gt;\u0026lt;/bean\u0026gt; \u0026lt;/mvc:interceptors\u0026gt; \u0026lt;mvc:interceptors\u0026gt; \u0026lt;mvc:interceptor\u0026gt; \u0026lt;mvc:mapping path=\u0026#34;/flights\u0026#34;\u0026gt;\u0026lt;/mvc:mapping\u0026gt; \u0026lt;bean class=\u0026#34;com.google.cloud.sqlcommenter.interceptors.SpringSQLCommenterInterceptor\u0026#34;\u0026gt;\u0026lt;/bean\u0026gt; \u0026lt;/mvc:interceptor\u0026gt; \u0026lt;/mvc:interceptors\u0026gt;   Hibernate If Spring is using Hibernate, in addtion to the step XML based configuration, since you might not be using a persistence.xml file, we can setup in Java code the hibernate.session_factory.statement_inspector configuration property in your additionalProperties method as per\nimport com.google.cloud.sqlcommenter.schhibernate.SCHibernate; @Configuration @EnableTransactionManagement public class JPAConfig { @Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory() { LocalContainerEntityManagerFactoryBean em = new LocalContainerEntityManagerFactoryBean(); em.setDataSource(dataSource()); em.setPackagesToScan(new String[] { \u0026#34;you.application.domain.model\u0026#34; }); em.setJpaVendorAdapter(new HibernateJpaVendorAdapter()); em.setJpaProperties(additionalProperties()); return em; } private Properties additionalProperties() { Properties properties = new Properties(); properties.setProperty(\u0026#34;hibernate.session_factory.statement_inspector\u0026#34;, SCHibernate.class.getName()); return properties; } } References    Resource URL     Spring framework homepage https://spring.io/   sqlcommenter-java on Github https://github.com/google/sqlcommenter/tree/master/java/sqlcommenter-java   Spring Interceptor https://docs.spring.io/spring/docs/5.0.4.BUILD-SNAPSHOT/javadoc-api/org/aopalliance/intercept/Interceptor.html   Hibernate SQLCommenter integration /java/hibernate    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/django/gcp/",
	"title": "Google Cloud Platform",
	"tags": ["python", "django", "appengine", "gce", "gcp", "google", "compute"],
	"description": "",
	"content": " Introduction Requirements Addition to your code References  Introduction This guide will help you add sqlcommenter to your Django applications running on Google Cloud Platform (GCP)\nRequirements    Steps Resource     Django on GCP https://cloud.google.com/python/django/   google-cloud-sqlcommenter https://pypi.org/project/google-cloud-sqlcommenter   Django 2.X https://docs.djangoproject.com/en/stable/faq/install   Python 3.X https://www.python.org/downloads/    Addition to your code Firstly, please install google-cloud-sqlcommenter.\nFor any Django deployment, we can just edit our settings.py file and update the MIDDLEWARE section as per:\nMIDDLEWARE = [ \u0026#39;google.cloud.sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] References    Resource URL     Running Django on GCP https://cloud.google.com/python/django/   Installing Django middleware /python/django#installation    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/psycopg2/",
	"title": "psycopg2",
	"tags": [],
	"description": "",
	"content": " Introduction Requirements Installation  pip install Source install Usage   CommenterCursor  with_opencensus=True   Expected fields  Default options with Flask   End to end examples  Source code Results   With flask References  Introduction This package is in the form of a psycopg2 cursor factory whose purpose is to augment a SQL statement right before execution, with information about the driver and user code to help correlate user code with executed SQL statements.\nWe provide a CommenterCursorFactory that takes options such as\nCommenterCursorFactory(with_opencensus=\u0026lt;True or False\u0026gt;) We provide options such as with_opencensus because\nRequirements    Requirement Restriction     psycopg2 (any version) http://initd.org/psycopg/docs/index.html   Python (any version) https://www.python.org/downloads/    Installation This cursor factory can be installed by any of the following:\nPip install pip3 install google-cloud-sqlcommenter Source install git clone https://github.com/google/sqlcommenter.git cd python/sqlcommenter-python \u0026amp;\u0026amp; python3 setup.py install Usage We\u0026rsquo;ll perform the following imports in our source code:\nCommenterCursorFactory CommenterCursorFactory is a factory for a cursor_factory that when used to create a psycopg2.Connection engine will grab information about your application and augment it as a comment to your SQL statement.\nimport psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory conn = psycopg2.connect(..., cursor_factory=CommenterCursorFactory()) with_openCensus=True To enable the comment cursor to also attach information about the current OpenCensus span (if any exists), pass in option with_opencensus=True when invoking CommenterCursorFactory, so\nconn = psycopg2.connect(..., cursor_factory=CommenterCursorFactory(with_opencensus=True)) Expected fields    Field Description Included by default     db_driver The underlying database driver e.g. 'psycopg2' ❌   dbapi_threadsafety The threadsafety API assignment e.g. 2 ❌   driver_paramstyle The Python DB API style of parameters e.g. pyformat ❌   libpq_version The underlying version of libpq that was used by psycopg2 ❌   traceparent The W3C TraceContext.Traceparent field of the OpenCensus trace \u0026ndash; optionally defined with with_opencensus=True ❌   tracestate The W3C TraceContext.Tracestate field of the OpenCensus trace \u0026ndash; optionally defined with with_opencensus=True ❌    Default options with flask If combined with Flask, the following options will be turned on by default\n   Field Description **kwargs field name     controller Grabs the controller being used with_controller   framework Grabs the framework and its version with_framework   route Grabs the route being used with_route    End to end examples Source code With OpenCensus  With DB Driver  With DB API Level  With DB API Thread Safety  With Driver Parameter Style  With libpq Version   #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory from opencensus.trace.samplers import AlwaysOnSampler from opencensus.trace.tracer import Tracer DSN = \u0026#39;...\u0026#39; # DB connection info class NoopExporter(): def emit(self, *args, **kwargs): pass def export(self, *args, **kwargs): pass def main(): tracer = Tracer(exporter=NoopExporter, sampler=AlwaysOnSampler()) cursor_factory = CommenterCursorFactory(with_opencensus=True) with tracer.span(): with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory DSN = \u0026#39;...\u0026#39; # DB connection info def main(): cursor_factory = CommenterCursorFactory(with_db_driver=True) with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory DSN = \u0026#39;...\u0026#39; # DB connection info def main(): cursor_factory = CommenterCursorFactory(with_dbapi_level=True) with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory DSN = \u0026#39;...\u0026#39; # DB connection info def main(): cursor_factory = CommenterCursorFactory(with_dbapi_threadsafety=True) with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory DSN = \u0026#39;...\u0026#39; # DB connection info def main(): cursor_factory = CommenterCursorFactory(with_driver_paramstyle=True) with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 import psycopg2 from google.cloud.sqlommenter.psycopg2.extension import CommenterCursorFactory DSN = \u0026#39;...\u0026#39; # DB connection info def main(): cursor_factory = CommenterCursorFactory(with_libpq_version=True) with psycopg2.connect(DSN, cursor_factory=cursor_factory) as conn: with conn.cursor() as cursor: cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) for row in cursor: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main()   python3 main.py (1, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 51, 12, 910545, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (2, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 45, 905771, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (3, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 46, 908185, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (4, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 47, 557196, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (5, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 47, 853424, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) Results Examining our Postgresql server logs, with the various options\nWith OpenCensus  With DB Driver  With DB API Level  With DB API Thread Safety  With Driver Parameter Style  With libpq Version   2019-07-17 15:45:12.254 -03 [16353] LOG: statement: SELECT * FROM polls_question /*traceparent=\u0026#39;00-fdda4e35e3083efdd6ee9ca4df5f3402-b3139d365faa0f43-01\u0026#39;*/ 2019-07-17 15:56:05.192 -03 [16491] LOG: statement: SELECT * FROM polls_question /*db_driver=\u0026#39;psycopg2%3A2.8.3%20%28dt%20dec%20pq3%20ext%20lo64%29\u0026#39;*/ 2019-07-17 15:59:45.935 -03 [16566] LOG: statement: SELECT * FROM polls_question /*dbapi_level=\u0026#39;2.0\u0026#39;*/ 2019-07-17 16:01:15.533 -03 [16600] LOG: statement: SELECT * FROM polls_question /*dbapi_threadsafety=2*/ 2019-07-17 16:03:54.687 -03 [16652] LOG: statement: SELECT * FROM polls_question /*driver_paramstyle=\u0026#39;pyformat\u0026#39;*/ 2019-07-17 16:05:37.618 -03 [16708] LOG: statement: SELECT * FROM polls_question /*libpq_version=110002*/   With flask When coupled with the web framework flask, we still provide middleware to correlate your web applications with your SQL statements from psycopg2. Please see this end-to-end guide below:   References    Resource URL     psycopg2 project http://initd.org/psycopg/docs/index.html   sqlcommenter-psycopg2 on PyPi https://pypi.org/project/google-cloud-sqlcommenter   sqlcommenter-psycopg2 on Github https://github.com/google/sqlcommenter   OpenCensus https://opencensus.io/   OpenCensus SpanID https://opencensus.io/tracing/span/spanid   OpenCensus TraceID https://opencensus.io/tracing/span/traceid    "
},
{
	"uri": "https://google.github.io/sqlcommenter/node/express/",
	"title": "Express.js",
	"tags": ["express", "express.js", "middleware", "node", "node.js"],
	"description": "",
	"content": " Introduction References  Introduction We provide express.js application-level middleware with the following ORMs/Query-Builders:\n    References    Resource URL     express.js https://expressjs.com/   express.js middleware https://expressjs.com/en/guide/using-middleware.html    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/django/aws/",
	"title": "Amazon Web Services",
	"tags": ["python", "django", "ec2", "lambda", "aws", "amazon", "compute"],
	"description": "",
	"content": " Introduction Requirements Addition to your code References  Introduction This guide will help you add sqlcommenter to your Django applications running on Amazon Web Services (AWS)\nRequirements    Steps Resource     Python on AWS https://aws.amazon.com/getting-started/projects/deploy-python-application/   google-cloud-sqlcommenter https://pypi.org/project/google-cloud-sqlcommenter   Django 2.X https://docs.djangoproject.com/en/stable/faq/install   Python 3.X https://www.python.org/downloads/    Addition to your code For any Django deployment, we can just edit your settings.py file and update the MIDDLEWARE section with\nMIDDLEWARE = [ \u0026#39;google.cloud.sqlcommenter.django.middleware.SqlCommenter\u0026#39;, ... ] References    Resource URL     Deploying Python applications on AWS https://aws.amazon.com/getting-started/projects/deploy-python-application/   General sqlcommenter Django guide /python/django    "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "sqlcommenter support is available in Python for the following frameworks/ORMs:\n        "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/sqlalchemy/",
	"title": "SQLAlchemy",
	"tags": [],
	"description": "",
	"content": " Introduction Requirements BeforeExecuteFactory Fields End to end examples With flask References  Introduction sqlcommenter-sqlalchemy provides a factory to create before_cursor_execute, called BeforeExecuteFactory\nWe provide a BeforeExecuteFactory that takes options such as\nCommenterCursorFactory(with_opencensus=\u0026lt;True or False\u0026gt;) We provide options such as with_opencensus because\nRequirements  Python X: any version of Python that is supported by SQLAlchemy OpenCensus optionally  Installation Pip  Source   pip3 install google-cloud-sqlcommenter git clone https://github.com/google/sqlcommenter.git cd python/sqlcommenter-python \u0026amp;\u0026amp; python3 setup.py install   and then we shall perform the following imports in our source code:\nBeforeExecuteFactory BeforeExecuteFactory is a factory that creates a before_cursor_execute hook to your engine to grab information about your application and augment it as a comment to your SQL statement.\nfrom sqlalchemy import create_engine, event from sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory engine = create_engine(...) # Create the engine with your dialect of SQL event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, BeforeExecuteFactory(), retval=True) engine.execute(...) # comment will be appended to SQL before execution NOTE Please ensure that you set retval=True when listening for events\nand this will produce such output on for example a Postgresql database logs:\n2019-06-30 18:01:16.315 PDT [96973] LOG: statement: SELECT * FROM polls_question /*traceparent=\u0026#39;00-ade4c36dc5e43b503a5bba237ea11746-578a74a562044332-01\u0026#39;*/ with_openCensus=True To enable the comment cursor to also attach information about the current OpenCensus span (if any exists), pass in option with_opencensus=True when invoking BeforeExecuteFactory, so\nengine = create_engine(\u0026#34;postgresql://:$postgres$@127.0.0.1:5432/quickstart_py\u0026#34;) event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, BeforeExecuteFactory(with_opencensus=True), retval=True) engine.execute(...) # comment will be appended to SQL before execution NOTE Please ensure that you set retval=True when listening for events\nFields    Field Description Included by default     db_driver The underlying database driver e.g. 'psycopg2' ❌   db_framework The version of SQLAlchemy in the form 'sqlalchemy:\u0026lt;sqlalchemy_version\u0026gt;' ❌   traceparent The W3C TraceContext.Traceparent field of the OpenCensus trace \u0026ndash; optionally defined with with_opencensus=True ❌   tracestate The W3C TraceContext.Tracestate field of the OpenCensus trace \u0026ndash; optionally defined with with_opencensus=True ❌    End to end examples Source code With OpenCensus  With DB Framework  With DB Driver   #!/usr/bin/env python3 from sqlalchemy import create_engine, event from google.cloud.sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory def main(): tracer = Tracer(exporter=NoopExporter, sampler=AlwaysOnSampler()) engine = create_engine(DB_URL) listener = BeforeExecuteFactory(with_opencensus=True) event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, listener, retval=True) with tracer.span(): result = engine.execute(\u0026#39;SELECT * FROM polls_question\u0026#39;) for row in result: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 from sqlalchemy import create_engine, event from google.cloud.sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory DB_URL = \u0026#39;...\u0026#39; # DB connection info def main(): engine = create_engine(DB_URL) listener = BeforeExecuteFactory(with_db_framework=True) event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, listener, retval=True) result = engine.execute(\u0026#39;SELECT * FROM polls_question\u0026#39;) for row in result: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main() #!/usr/bin/env python3 from sqlalchemy import create_engine, event from google.cloud.sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory DB_URL = \u0026#39;...\u0026#39; # DB connection info def main(): engine = create_engine(DB_URL) listener = BeforeExecuteFactory(with_db_driver=True) event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, listener, retval=True) result = engine.execute(\u0026#39;SELECT * FROM polls_question\u0026#39;) for row in result: print(row) if __name__ == \u0026#39;__main__\u0026#39;: main()   python3 main.py (1, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 51, 12, 910545, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (2, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 45, 905771, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (3, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 46, 908185, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (4, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 47, 557196, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) (5, \u0026#39;Wassup?\u0026#39;, datetime.datetime(2019, 5, 30, 13, 57, 47, 853424, tzinfo=psycopg2.tz.FixedOffsetTimezone(offset=-420, name=None))) Results Examining our Postgresql server logs\nWith OpenCensus  With DB Framework  With DB Driver   2019-07-18 14:10:15.228 -03 [30071] LOG: statement: SELECT * FROM polls_question /*traceparent=\u0026#39;00-bf66750ad4c76f614c0a99d843758cbb-e6b27c3caf35de73-01\u0026#39;*/ 2019-07-18 14:11:19.576 -03 [30108] LOG: statement: SELECT * FROM polls_question /*db_framework=\u0026#39;sqlalchemy%3A1.3.5\u0026#39;*/ 2019-07-18 14:03:33.426 -03 [29858] LOG: statement: SELECT * FROM polls_question /*db_driver=\u0026#39;psycopg2\u0026#39;*/   With flask When coupled with the web framework flask, we still provide middleware to correlate your web applications with your SQL statements from sqlalchemy. Please see this end-to-end guide below:   References    Resource URL     sqlcommenter-sqlalchemy on PyPi https://pypi.org/project/google-cloud-sqlcommenter   sqlcommenter-sqlalchemy on Github https://github.com/google/sqlcommenter   OpenCensus https://opencensus.io/   OpenCensus SpanID https://opencensus.io/tracing/span/spanid   OpenCensus TraceID https://opencensus.io/tracing/span/traceid    "
},
{
	"uri": "https://google.github.io/sqlcommenter/php/",
	"title": "Php",
	"tags": [],
	"description": "",
	"content": "sqlcommenter support is available for the following Php ORMs/frameworks:\n  "
},
{
	"uri": "https://google.github.io/sqlcommenter/ruby/",
	"title": "Ruby",
	"tags": [],
	"description": "",
	"content": "sqlcommenter support is available for the following Ruby ORMs/frameworks:\n  "
},
{
	"uri": "https://google.github.io/sqlcommenter/python/flask/",
	"title": "Flask",
	"tags": ["python", "flask"],
	"description": "",
	"content": " Introduction Using it Expected fields End to examples  With psycopg2 With sqlalchemy   References  Introduction We provide Flask middleware which when coupled with:\n sqlcommenter-psycopg2 sqlcommenter-sqlalchemy  allow us to retrieve the controller and route correlated with your source code in your web app.\nUsing it Having successfully installed sqlcommenter-python\u0026rsquo;s sqlcommenter\nfrom sqlcommenter import FlaskMiddleware # Then in your flask programs just pass in the app FlaskMiddleware(app) Expected fields This Flask integration when coupled with compatible drivers will place the following fields\n   Field Included by default Description Turn if off by     controller ✔ The function being used to service an HTTP request with_controller=False   framework ✔ \u0026ldquo;flask:\u0026lt;FLASK_VERSION\u0026gt;\u0026rdquo; with_framework=False   route ✔ The pattern used to match an HTTP request with_route=False    End to end examples With psycopg2 #!/usr/bin/env python3 import psycopg2 import json import flask app = flask.Flask(__name__) from google.cloud.sqlcommenter import FlaskMiddleware from google.cloud.sqlcommenter.psycopg2.extension import CommenterCursorFactory conn = None @app.route(\u0026#39;/polls\u0026#39;) def get_polls(): cursor = conn.cursor() cursor.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) str_polls = list(map(lambda s: str(s), cursor)) cursor.close() return json.dumps(str_polls) def main(): global conn try: conn = psycopg2.connect(user=\u0026#39;\u0026#39;, password=\u0026#39;$postgres$\u0026#39;, host=\u0026#39;127.0.0.1\u0026#39;, port=\u0026#39;5432\u0026#39;, database=\u0026#39;quickstart_py\u0026#39;, cursor_factory=CommenterCursorFactory()) # Now enable the middleware. FlaskMiddleware(app) # Finally run the Flask web app. app.run(host=\u0026#39;localhost\u0026#39;, port=8088, threaded=True) except Exception as e: print(\u0026#39;Encountered exception %s\u0026#39;%(e)) finally: if conn: conn.close() if __name__ == \u0026#39;__main__\u0026#39;: main() which when run by python3 main.py and on visiting http://localhost:8088/polls we can see on our database logs\n2019-06-08 12:19:11.284 PDT [70984] LOG: statement: SELECT * FROM polls_question /*controller=\u0026#39;get_polls\u0026#39;,db_driver=\u0026#39;psycopg2\u0026#39;,framework=\u0026#39;sqlalchemy%3A1.3.4\u0026#39;, route=\u0026#39;/polls\u0026#39;,traceparent=\u0026#39;00-5b3df77064f35f091e89fb40022e2a1d-9bbd4868cf0ba2c3-01\u0026#39;*/ With sqlalchemy Having successfully installed google-cloud-sqlcommenter you can now just run #!/usr/bin/env python3 import json import flask app = flask.Flask(__name__) from sqlalchemy import create_engine, event from sqlcommenter import FlaskMiddleware from sqlcommenter.sqlalchemy.executor import BeforeExecuteFactory engine = None @app.route(\u0026#39;/polls\u0026#39;) def get_polls(): result_proxy = engine.execute(\u0026#34;SELECT * FROM polls_question\u0026#34;) str_polls = list(map(lambda s: str(s), result_proxy)) result_proxy.close() return json.dumps(str_polls) def main(): global engine engine = create_engine(\u0026#34;postgresql://:$postgres$@127.0.0.1:5432/quickstart_py\u0026#34;) event.listen(engine, \u0026#39;before_cursor_execute\u0026#39;, BeforeExecuteFactory(), retval=True) FlaskMiddleware(app) app.run(host=\u0026#39;localhost\u0026#39;, port=8089, threaded=True) if __name__ == \u0026#39;__main__\u0026#39;: main()\nwhich when run by python3 main.py and on visiting http://localhost:8089/polls we can see on our database logs\n2019-06-08 12:17:59.518 PDT [73546] LOG: statement: SELECT * FROM polls_question /*controller=\u0026#39;get_polls\u0026#39;,db_driver=\u0026#39;psycopg2%3A2.8.2%20%28dt%20dec%20pq3%20ext%20lo64%29\u0026#39;, dbapi_level=\u0026#39;2.0\u0026#39;,dbapi_threadsafety=2,driver_paramstyle=\u0026#39;pyformat\u0026#39;, framework=\u0026#39;flask%3A1.0.3\u0026#39;,libpq_version=100001,route=\u0026#39;/polls\u0026#39;*/ References    Resource URL     flask web framework http://flask.pocoo.org/   sqlcommenter-psycopg2+flask /python/psycopg2#with-flask   sqlcommenter-sqlalchemy+flask /python/sqlalchemy#with-flask    "
},
{
	"uri": "https://google.github.io/sqlcommenter/node/",
	"title": "Node.js",
	"tags": [],
	"description": "",
	"content": " Introduction Integrations Installation  From source Verify installation    Introduction sqlcommenter is a suite of plugins/middleware/wrappers to augment SQL statements from ORMs/Querybuilders with comments that can be used later to correlate user code with SQL statements.\nIntegrations sqlcommenter-nodejs provides support for the following:\n      Installing it sqlcommenter-nodejs can installed in a couple of ways:\nFrom source The first step is to clone the repository. This can be done with git by running: git clone https://github.com/google/sqlcommenter.git Inspect the source code and note the path to the package you want installed.\nsqlcommenter/nodejs/sqlcommenter-nodejs └── packages ├── knex │ ├── index.js │ ├── package.json │ ├── test │ └── ... └── sequelize ├── index.js ├── package.json ├── test └── ... Each folder in the packages directory can be installed by running\nnpm install \u0026lt;path/to/package\u0026gt; for example to install @google-cloud/sqlcommenter-knex in a given location, run npm install /path/to/sqlcommenter-nodejs/packages/knex. Same for every package(folder) in the packages directory.\n# install  \u0026gt; npm install /path/to/sqlcommenter-nodejs/packages/knex + @google-cloud/sqlcommenter-knex@0.0.1 Verify Installation If package is properly installed, running npm list \u0026lt;package-name\u0026gt; will output details of the package. Let\u0026rsquo;s verify the installation of @google-cloud/sqlcommenter-knex below:\n# verify \u0026gt; npm list @google-cloud/sqlcommenter-knex project@0.0.0 path/to/project └── @google-cloud/sqlcommenter-knex@0.0.1 -\u0026gt; /path/to/sqlcommenter-nodejs/packages/knex Inspecting the package.json file after installation should also show the installed pacakge.\n"
},
{
	"uri": "https://google.github.io/sqlcommenter/databases/postgresql/",
	"title": "Postgresql",
	"tags": ["databases", "postgresql"],
	"description": "",
	"content": "If you host your own instance of Postgresql, you can run it with logs to examine statements by following the guide at Runtime config logging\ni.e. on macOS, edit /usr/local/var/postgres/postgresql.conf and set log_destination to 'stderr' as per:\n#------------------------------------------------------------------------------ # REPORTING AND LOGGING #------------------------------------------------------------------------------ # - Where to Log - log_destination = \u0026#39;stderr\u0026#39; # Valid values are combinations of # stderr, csvlog, syslog, and eventlog, # depending on platform. csvlog # requires logging_collector to be on. and then when run as per\n$ PGDATA=/usr/local/var/postgres postgres produces such output\n2019-05-31 16:27:27.482 PDT [19175] LOG: listening on IPv4 address \u0026#34;127.0.0.1\u0026#34;, port 5432 2019-05-31 16:27:27.482 PDT [19175] LOG: listening on IPv6 address \u0026#34;::1\u0026#34;, port 5432 2019-05-31 16:27:27.482 PDT [19175] LOG: listening on Unix socket \u0026#34;/tmp/.s.PGSQL.5432\u0026#34; 2019-05-31 16:27:27.503 PDT [19176] LOG: database system was shut down at 2019-05-31 16:27:06 PDT 2019-05-31 16:27:27.508 PDT [19175] LOG: database system is ready to accept connections 2019-05-31 16:27:31.190 PDT [19183] LOG: statement: SET TIME ZONE \u0026#39;UTC\u0026#39; 2019-05-31 16:27:31.195 PDT [19183] LOG: statement: INSERT INTO \u0026#34;polls_question\u0026#34; (\u0026#34;question_text\u0026#34;, \u0026#34;pub_date\u0026#34;) VALUES (\u0026#39;Wassup?\u0026#39;, \u0026#39;2019-05-31T23:27:31.175952+00:00\u0026#39;::timestamptz) RETURNING \u0026#34;polls_question\u0026#34;.\u0026#34;id\u0026#34; /*controller=\u0026#39;index\u0026#39;,db_driver=\u0026#39;django.db.backends.postgresql\u0026#39;, framework=\u0026#39;django%3A2.2.1\u0026#39;,route=\u0026#39;%5Epolls/%24\u0026#39;*/ References    Resource URL     Runtime config logging https://www.postgresql.org/docs/11/runtime-config-logging.html#RUNTIME-CONFIG-LOGGING-WHERE    "
},
{
	"uri": "https://google.github.io/sqlcommenter/java/",
	"title": "Java",
	"tags": [],
	"description": "",
	"content": " Introduction Integrations Installing it  From source  Building it   Verify installation Tests    Introduction sqlcommenter-java is the implementation of sqlcommenter in the Java programming language.\nIntegrations sqlcommenter-java provides support for the following plugins/ORMs:\n    Installing it sqlcommenter-java can installed in a couple of ways:\nFrom source Please visit source page on Github\nBuilding it Next, after changing directories into java/sqlcommenter-java, run ./gradlew install which should produce should output\n$ ./gradlew install BUILD SUCCESSFUL in 1s 7 actionable tasks: 1 executed, 6 up-to-date Verify installation sqlcommenter-java if properly installed should appear in the directory $HOME/.m2/integrations/repository/io.\nThe following should be your directory structure:\n~/.m2/repository/io └── com └── google └── cloud └── sqlcommenter ├── 0.0.1 │ ├── sqlcommenter-java-0.0.1-javadoc.jar │ ├── sqlcommenter-java-0.0.1-javadoc.jar.asc │ ├── sqlcommenter-java-0.0.1-sources.jar │ ├── sqlcommenter-java-0.0.1-sources.jar.asc │ ├── sqlcommenter-java-0.0.1.jar │ ├── sqlcommenter-java-0.0.1.jar.asc │ └── sqlcommenter-java-0.0.1.pom └── maven-metadata-local.xml and then in your programs that use Maven, when building packages, please do\nmvn install -nsu to use look up local packages.\nTests Tests can be run by\n$ ./gradlew test "
},
{
	"uri": "https://google.github.io/sqlcommenter/databases/mysql/",
	"title": "MySQL",
	"tags": ["databases", "mysql"],
	"description": "",
	"content": "If you host your own instance of MySQL, you can run it with logs to examine statements by following the guide at:\n   Guide URL     Running MySQL locally/System variables: log output https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_log_output   MySQL Docker installation with logs https://hub.docker.com/_/mysql    "
},
{
	"uri": "https://google.github.io/sqlcommenter/databases/mariadb/",
	"title": "MariaDB",
	"tags": ["databases", "mariadb"],
	"description": "",
	"content": "If you host your own instance of MariaDB, you can run it with logs to examine statements by following the guide at Query log output destination\nReferences    Resource URL     Log output https://mariadb.com/kb/en/library/general-query-log/#choosing-the-general-query-log-output-destination   MariaDB Docker https://hub.docker.com/_/mariadb/    "
},
{
	"uri": "https://google.github.io/sqlcommenter/databases/",
	"title": "Databases",
	"tags": ["databases", "mysql", "cloudsql", "sqlite", "postgresql"],
	"description": "",
	"content": "In order to examine the results of sqlcommenter, we\u0026rsquo;ll need to examine query logs on the database. Below are some guides to help make this happen:\n          "
},
{
	"uri": "https://google.github.io/sqlcommenter/faq/",
	"title": "FAQ",
	"tags": [],
	"description": "",
	"content": " Why sqlcommenter How does sqlcommenter benefit me What ORMs does sqlcommenter support What databases does sqlcommenter support How do I use sqlcommenter in my application How do I examine the augmented SQL statements Where is the specification What are the default fields  Why sqlcommenter? Most applications require persistent data yet when database performance goes awry, it is next to impossible to easily correlate slow queries with source code.\nHow does sqlcommenter benefit me?  It helps provide observability and can help correlate your source code with slow queries thus guiding you in performance optimization  What ORMs does sqlcommenter support? See the root of this project\nWhat databases does sqlcommenter support? When developing sqlcommenter, we\u0026rsquo;ve tested it with a couple of databases. Please see /databases for an authoritative list but here are some:\n          How do I use sqlcommenter in my application? If you are using a supported ORM/framework, it shouldn\u0026rsquo;t be a hassle at all to use. Just pick any of the ORMs in your favorite language\n                  How do I examine the augmented SQL statements? If you manage your databases or have access to database server logs, the statements will be logged there. Examine databases for more information how.\nWhere is the specification? The specification is available here.\nWhat are the default fields    Integration action controller framework route     ActiveRecord/Marginalia ✔ ✔ ✔ ✔   Hibernate+ Spring ✔ ✔ ✔ ✔   knex.js+ express.js ❌ ✔ ❌ ❌   Django ❌ ✔ ✔ ✔   psycopg2 + Flask ❌ ✔ ✔ ✔   sqlalchemy+ Flask ❌ ✔ ✔ ✔   sequelize.js+ express.js ❌ ✔ ❌ ❌    What ORMs support OpenTelemetry ? Node.js ORMs(Knex, Sequelize, Express) support OpenTelemetry.\n"
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/laravel/",
	"title": "laravel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/php/",
	"title": "php",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/activerecord/",
	"title": "activerecord",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/marginalia/",
	"title": "marginalia",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/rails/",
	"title": "rails",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/ruby/",
	"title": "ruby",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/rubyonrails/",
	"title": "rubyonrails",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/express/",
	"title": "express",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/express.js/",
	"title": "express.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/middleware/",
	"title": "middleware",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/node/",
	"title": "node",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/node.js/",
	"title": "node.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/flask/",
	"title": "flask",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/python/",
	"title": "python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/databases/",
	"title": "databases",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/mariadb/",
	"title": "mariadb",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/mysql/",
	"title": "mysql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/postgresql/",
	"title": "postgresql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/cloudsql/",
	"title": "cloudsql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/sqlite/",
	"title": "sqlite",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/amazon/",
	"title": "amazon",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/aws/",
	"title": "aws",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/compute/",
	"title": "compute",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/django/",
	"title": "django",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/ec2/",
	"title": "ec2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/lambda/",
	"title": "lambda",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/local/",
	"title": "local",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " sqlcommenter Attach SQL comments to correlate user code in ORMs and SQL drivers with SQL statements    sqlcommenter  is a suite of middlewares/plugins that enable your ORMs to augment SQL statements before execution, with comments containing information about the code that caused its execution. This helps in easily correlating slow performance with source code and giving insights into backend database performance. In short it provides some observability into the state of your client-side applications and their impact on the database\u0026rsquo;s server-side.\n Value Sample Interpretation Getting started Support  Languages Frameworks Databases   Source code  Value sqlcommenter provides instrumentation/wrappers to augment SQL from frameworks and ORMs. The augmented SQL provides key=\u0026lsquo;value\u0026rsquo; comments that help correlate usercode with ORM generated SQL statements and they can be examined in your database server logs. It provides deeper observability insights into the state of your applications all the way to your database server.\nSample This log was extracted from a live web application\n2019-05-28 11:54:50.780 PDT [64128] LOG: statement: INSERT INTO \u0026#34;polls_question\u0026#34; (\u0026#34;question_text\u0026#34;, \u0026#34;pub_date\u0026#34;) VALUES (\u0026#39;What is this?\u0026#39;, \u0026#39;2019-05-28T18:54:50.767481+00:00\u0026#39;::timestamptz) RETURNING \u0026#34;polls_question\u0026#34;.\u0026#34;id\u0026#34; /*controller=\u0026#39;index\u0026#39;,db_driver=\u0026#39;django.db.backends.postgresql\u0026#39;, framework=\u0026#39;django%3A2.2.1\u0026#39;,route=\u0026#39;%5Epolls/%24\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/ Interpretation On examining the SQL statement from above in Sample and examining the comment in /*...*/\n/*controller=\u0026#39;index\u0026#39;,db_driver=\u0026#39;django.db.backends.postgresql\u0026#39;, framework=\u0026#39;django%3A2.2.1\u0026#39;,route=\u0026#39;%5Epolls/%24\u0026#39;, traceparent=\u0026#39;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026#39;, tracestate=\u0026#39;congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7\u0026#39;*/ we can now correlate and pinpoint the fields in the above slow SQL query to our source code in our web application:\n   Original field Interpretation     controller='index' Controller name ^/polls/$   db_driver='django.db.backends.postgresql' Database driver django.db.backends.postgresql   framework='django%3A2.2.1' Framework version of django 2.2.1   route='%5Epolls/%24' Route of ^/polls/$   traceparent='00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01' W3C TraceContext.Traceparent of \u0026lsquo;00-5bd66ef5095369c7b0d1f8f4bd33716a-c532cb4098ac3dd2-01\u0026rsquo;   tracestate='congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7' W3C TraceContext.Tracestate with entries congo=t61rcWkgMzE,rojo=00f067aa0ba902b7    Support We support a variety of languages and frameworks such as:\nLanguages           Frameworks                       Databases We have tested the instrumentation on the following databases:\n          Source code The project is hosted on Github\n"
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/appengine/",
	"title": "appengine",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/gce/",
	"title": "gce",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/gcp/",
	"title": "gcp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/google/",
	"title": "google",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/knex/",
	"title": "knex",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/knex.js/",
	"title": "knex.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/query-builder/",
	"title": "query-builder",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/sequelize/",
	"title": "sequelize",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/tags/sequelize.js/",
	"title": "sequelize.js",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://google.github.io/sqlcommenter/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Github  "
},
{
	"uri": "https://google.github.io/sqlcommenter/_header/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "sqlcommenter\n"
},
{
	"uri": "https://google.github.io/sqlcommenter/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]